(function(o,c){typeof exports=="object"&&typeof module!="undefined"?module.exports=c(require("@metamask/eth-sig-util"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","web3"],c):(o=typeof globalThis!="undefined"?globalThis:o||self,o.cryptoSDK=c(o["@metamask/eth-sig-util"],o.Web3))})(this,function(o,c){"use strict";function D(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var g=D(c);const _=e=>{document.addEventListener(m,e)},i=(e,t)=>{const n=new CustomEvent(m,{detail:{type:e,msg:t}});document.dispatchEvent(n)},s=(e,t)=>{const n=new CustomEvent(m,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",paymentConfirmed:"paymentConfirmed",paymentNotConfirmed:"paymentNotConfirmed"},m="cryptoSDK",h="97",$="BSC Testnet",R="https://data-seed-prebsc-1-s1.binance.org",M="https://testnet.bscscan.com/",T="BNB",B="BNB",K="18",d=async()=>{const e=p(),t=v();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+y(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${y(e)}`;throw new Error(a)}else return!0}},y=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),y(h));else return t},p=()=>[Number(h)],C=async()=>{try{const e=await d();return i(r.network,e),e}catch(e){return s(r.network,e),!1}},V=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(h).toString(16)}`,chainName:$,nativeCurrency:{name:T,symbol:B,decimals:K},rpcUrls:[R],blockExplorerUrls:[M]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await d()?i(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},v=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},b=async e=>{try{await C()?i(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},x=()=>{console.log("#### CSDK_CHAIN_ID","97"),window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),i(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await b(e)}),window.ethereum.on("message",async e=>{i(r.message,{message:e})}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),i(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await b(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},O=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},E=()=>!!(window.ethereum||window.web3),P=async()=>{if(!E()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=p();try{await d(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await O()}}catch(t){throw s(r.address,t),new Error(t)}};x();const l={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"};var u={saveConfirmedClaim:e=>{localStorage.setItem(l.claimConfirmed,JSON.stringify(e))},getConfirmedClaim:async()=>JSON.parse(await localStorage.getItem(l.claimConfirmed)),saveClaimAlice:e=>{localStorage.setItem(l.claimAlice,JSON.stringify(e))},getClaimAlice:async()=>JSON.parse(await localStorage.getItem(l.claimAlice))};const w="0xeA085D9698651e76750F07d0dE0464476187b3ca",N=async e=>{const t=await u.getConfirmedClaim();if(t){if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}`);if(t.nonce+1!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - last claim nonce: ${t.nonce}`);if(e.addresses[1]!==w)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${w}`);const a=t.cumulativeDebits[1]-t.cumulativeDebits[0]+e.amount;S(a,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[1]!==w)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${w}`);const n=e.amount;S(n,e.cumulativeDebits)}return!0},S=(e,t)=>{if(e>0){if(t[0]!==0)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: 0`);if(t[1]!==e)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: ${e}`)}else{if(t[0]!==-e)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: ${-e}`);if(t[1]!==0)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: 0`)}},H=async e=>{const t=await u.getClaimAlice();let n=!1;return t?n=L(e,t):n=await N(e),n},L=(e,t)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(t.nonce!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.amount!==e.amount)throw new Error(`Invalid claim amount: ${e.amount} - saved claim amount: ${t.amount}`);if(t.cumulativeDebits[0]!==e.cumulativeDebits[0])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[0]} - saved claim: ${t.cumulativeDebits[0]}`);if(t.cumulativeDebits[1]!==e.cumulativeDebits[1])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[1]} - saved claim: ${t.cumulativeDebits[1]}`);if(t.type!==e.type)throw new Error(`Invalid claim type: ${e.type} - saved claim type: ${t.type}`);if(t.addresses[0]!==e.addresses[0])throw new Error(`Invalid address of Client: ${e.addresses[0]} - saved claim: ${t.addresses[0]}`);if(t.addresses[1]!==e.addresses[1])throw new Error(`Invalid address of Server: ${e.addresses[1]} - saved claim: ${t.addresses[1]}`);return!0};var k={isValidNewClaim:N,isValidClaimAlice:H},U=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"}];const q="0xBC8655Fbb4ec8E3cc9edef00f05841A776907311",F=(e,t=q,n=U)=>{const a=new g.default(e);return new a.eth.Contract(n,t)},J=async(e,t,n)=>await e.methods[t](n).call();var G={getVaultBalance:async(e,t)=>{const n=F(t);return new g.default().utils.fromWei(await J(n,"balanceOf",e))}};const W={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0xBC8655Fbb4ec8E3cc9edef00f05841A776907311"};function A(e){return{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"}]},domain:W,primaryType:"Claim",message:{id:e.id,alice:e.addresses[0],bob:e.addresses[1],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[0],cumulativeDebitBob:e.cumulativeDebits[1]}}}const Y=(e,t=!1)=>{let n=1;t&&(n=0);const a=A(e),f=e.signatures[n];try{return o.recoverTypedSignature({data:a,signature:f,version:o.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},j=async(e,t)=>{if(await k.isValidNewClaim(e)){if(await X(e,t)===!0)return await Q(e,t),u.saveClaimAlice(e),e;throw new Error("Not enough balance")}},X=async(e,t)=>{const n=e.amount<0?0:1;return await z(e,n,t)},z=async(e,t,n)=>{try{const{balance:a}=await G.getVaultBalance(e.addresses[t],n);return a>=e.cumulativeDebits[t]}catch{throw new Error("Can't get balance from Vault")}},Q=async(e,t)=>{const n=A(e),a=e.addresses[0];e.signatures[0]=await t.request({method:"eth_signTypedData_v4",params:[a,JSON.stringify(n)],from:a})};var I={pay:j,payReceived:async e=>{if(await k.isValidClaimAlice(e))if(Y(e))u.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")}};return{getAddress:P,isMetamaskInstalled:E,isRightNet:C,setRightNet:V,addEventListener:_,pay:async e=>{try{await d()}catch(n){throw s(r.claimNotSigned,n),n}const t=v();try{const n=await I.pay(e,t);return i(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},payReceived:async e=>{try{await d()}catch(t){throw s(r.paymentNotConfirmed,t),t}try{await I.payReceived(e),i(r.paymentConfirmed,{claim:e})}catch(t){throw s(r.paymentNotConfirmed,{error:t,claim:e}),t}}}});
