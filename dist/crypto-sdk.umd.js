(function(i,o){typeof exports=="object"&&typeof module!="undefined"?module.exports=o():typeof define=="function"&&define.amd?define(o):(i=typeof globalThis!="undefined"?globalThis:i||self,i.cryptoSDK=o())})(this,function(){"use strict";const i=e=>{document.addEventListener(u,e)},o=(e,t)=>{const n=new CustomEvent(u,{detail:{type:e,msg:t}});document.dispatchEvent(n)},s=(e,t)=>{const n=new CustomEvent(u,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",paymentConfirmed:"paymentConfirmed",paymentNotConfirmed:"paymentNotConfirmed"},u="cryptoSDK",d=97,I="BSC Testnet2",S="https://data-seed-prebsc-1-s1.binance.org",$="https://testnet.bscscan.com/",R="BNB",D="BNB",_=18,c=async()=>{const e=f(),t=g();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+h(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${h(e)}`;throw new Error(a)}else return!0}},h=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),h(d));else return t},f=()=>[Number(d)],y=async()=>{try{const e=await c();return o(r.network,e),e}catch(e){return s(r.network,e),!1}},M=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(d).toString(16)}`,chainName:I,nativeCurrency:{name:R,symbol:D,decimals:_},rpcUrls:[S],blockExplorerUrls:[$]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await c()?o(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},g=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},p=async e=>{try{await y()?o(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},T=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId=d),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),o(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await p(e)}),window.ethereum.on("message",async e=>{o(r.message,{message:e})}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),o(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await p(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},x=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},v=()=>!!(window.ethereum||window.web3),B=async()=>{if(!v()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=f();try{await c(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await x()}}catch(t){throw s(r.address,t),new Error(t)}};T();const l={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"};var w={saveConfirmedClaim:e=>{localStorage.setItem(l.claimConfirmed,JSON.stringify(e))},getConfirmedClaim:async()=>JSON.parse(await localStorage.getItem(l.claimConfirmed)),saveClaimAlice:e=>{localStorage.setItem(l.claimAlice,JSON.stringify(e))},getClaimAlice:async()=>JSON.parse(await localStorage.getItem(l.claimAlice))};const m="0xeA085D9698651e76750F07d0dE0464476187b3ca",C=async e=>{const t=await w.getConfirmedClaim();if(t){if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}`);if(t.nonce+1!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - last claim nonce: ${t.nonce}`);if(e.addresses[1]!==m)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${m}`);const a=t.cumulativeDebits[1]-t.cumulativeDebits[0]+e.amount;E(a,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[1]!==m)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${m}`);const n=e.amount;E(n,e.cumulativeDebits)}return!0},E=(e,t)=>{if(e>0){if(t[0]!==0)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: 0`);if(t[1]!==e)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: ${e}`)}else{if(t[0]!==-e)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: ${-e}`);if(t[1]!==0)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: 0`)}},V=async e=>{const t=await w.getClaimAlice();let n=!1;return t?n=O(e,t):n=await C(e),n},O=(e,t)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(t.nonce!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.amount!==e.amount)throw new Error(`Invalid claim amount: ${e.amount} - saved claim amount: ${t.amount}`);if(t.cumulativeDebits[0]!==e.cumulativeDebits[0])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[0]} - saved claim: ${t.cumulativeDebits[0]}`);if(t.cumulativeDebits[1]!==e.cumulativeDebits[1])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[1]} - saved claim: ${t.cumulativeDebits[1]}`);if(t.type!==e.type)throw new Error(`Invalid claim type: ${e.type} - saved claim type: ${t.type}`);if(t.addresses[0]!==e.addresses[0])throw new Error(`Invalid address of Client: ${e.addresses[0]} - saved claim: ${t.addresses[0]}`);if(t.addresses[1]!==e.addresses[1])throw new Error(`Invalid address of Server: ${e.addresses[1]} - saved claim: ${t.addresses[1]}`);return!0};var N={isValidNewClaim:C,isValidClaimAlice:V};const P={name:"BSC Testnet",version:"1",chainId:97,verifyingContract:"0xBC8655Fbb4ec8E3cc9edef00f05841A776907311"};function b(e){return{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"}]},domain:P,primaryType:"Claim",message:{id:e.id,alice:e.addresses[0],bob:e.addresses[1],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[0],cumulativeDebitBob:e.cumulativeDebits[1]}}}const H=(e,t=!1)=>{let n=1;return t&&(n=0),b(e),e.signatures[n],!0};var k={pay:async(e,t)=>{if(await N.isValidNewClaim(t)){const a=b(t),A=t.addresses[0];return t.signatures[0]=await e.request({method:"eth_signTypedData_v4",params:[A,JSON.stringify(a)],from:A}),w.saveClaimAlice(t),t}},payReceived:async e=>{await N.isValidClaimAlice(e)&&H(e)&&w.saveConfirmedClaim(e)}};return{getAddress:B,isMetamaskInstalled:v,isRightNet:y,setRightNet:M,addEventListener:i,pay:async e=>{try{await c()}catch(n){throw s(r.claimNotSigned,n),n}const t=g();try{const n=await k.pay(t,e);return o(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},payReceived:async e=>{try{await c()}catch(t){throw s(r.paymentNotConfirmed,t),t}try{await k.payReceived(e),o(r.paymentConfirmed,{claim:e})}catch(t){throw s(r.paymentNotConfirmed,{error:t,claim:e}),t}}}});
