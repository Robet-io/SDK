(function(b,E){typeof exports=="object"&&typeof module!="undefined"?module.exports=E(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],E):(b=typeof globalThis!="undefined"?globalThis:b||self,b.cryptoSDK=E(b["@metamask/eth-sig-util"],b.bignumber.js,b.Web3))})(this,function(b,E,he){"use strict";function j(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var l=j(E),A=j(he);const fe=e=>{document.addEventListener(M,e)},be=e=>{document.addEventListener(z,e)},p=(e,t)=>{const n=new CustomEvent(M,{detail:{type:e,msg:t}});document.dispatchEvent(n)},Te=e=>{const t=new CustomEvent(z,{detail:JSON.parse(e)});document.dispatchEvent(t)},i=(e,t)=>{const n=new CustomEvent(M,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},s={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",withdrawSigned:"withdrawSigned",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getBalance:"getBalance",degaAllowed:"degaAllowed"},M="cryptoSDK",z="cryptoSDK_WS",x="undefined",Ce="undefined",ve="undefined",De="undefined",Ne="undefined",Ee="undefined",Ae="undefined",y=async()=>{const e=X(),t=w();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+V(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${V(e)}`;throw new Error(a)}else return!0}},V=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),V(x));else return t},X=()=>[Number(x)],Q=async()=>{try{const e=await y();return p(s.network,e),e}catch(e){return i(s.network,e),!1}},Se=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(x).toString(16)}`,chainName:Ce,nativeCurrency:{name:Ne,symbol:Ee,decimals:parseInt(Ae)},rpcUrls:[ve],blockExplorerUrls:[De]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await y()?p(s.network,"Success, network is set to the right one"):i(s.network,"Add net error: network is not changed")}catch(a){i(s.network,a.message?a.message:a)}}else throw window.web3?(i(s.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(i(s.network,"Metamask is not installed"),new Error("Metamask is not installed"))},w=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw i(s.metamaskNotInstalled,"Metamask is not installed"),new Error("Metamask is not installed")},Z=async e=>{try{await Q()?p(s.chainChanged,{chainId:e}):i(s.chainChanged,{chainId:e})}catch{i(s.chainChanged,{chainId:e})}},Be=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="undefined"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),p(s.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await Z(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),i(s.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),p(s.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await Z(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),i(s.error,e)}))},ke=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},ee=()=>!!(window.ethereum||window.web3),L=async()=>{if(!ee()){const t="Metamask is not installed, unable to get user address";throw i(s.metamaskNotInstalled,t),new Error(t)}const e=X();try{await y(e)}catch(t){throw i(s.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await ke()}}catch(t){throw i(s.address,t),new Error(t)}},te=async(e,t)=>(await y(),await w().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));Be();const Re="undefined",Ie={}.CSDK_CONTRACT_VAULT_NAME,$e={}.CSDK_CONTRACT_VAULT_VERSION,ne={name:Ie,version:$e,chainId:Re,verifyingContract:"undefined"},_e=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:ne,primaryType:"Signin",message:{method:"signin",text:e}}),Me=async(e,t)=>{const n=_e(e);try{const a=await te(n,t);return p(s.challengeSigned,{signature:a}),a}catch(a){throw i(s.challengeNotSigned,a),a}},xe="authToken",Ve="expireToken",Le=12e5,ae=e=>`${xe}_${e.toLowerCase()}`,se=e=>`${Ve}_${e.toLowerCase()}`,We=(e,t)=>{try{localStorage.setItem(ae(e),t),localStorage.setItem(se(e),Date.now()+Le),p(s.token,"JWT token received")}catch(n){i(s.token,n)}},re=e=>localStorage.getItem(ae(e));var B={signChallenge:Me,setToken:We,getToken:re,isLogged:e=>{if(re(e)){const n=localStorage.getItem(se(e));if(n&&n>Date.now())return!0}return!1}};const o=0,u=1,ie={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},W=e=>`${ie.claimConfirmed}_${e.toLowerCase()}`,oe=e=>`${ie.claimAlice}_${e.toLowerCase()}`,Oe=e=>{localStorage.setItem(W(e.addresses[o]),JSON.stringify(e))},qe=e=>JSON.parse(localStorage.getItem(W(e))),Fe=e=>{localStorage.setItem(oe(e.addresses[o]),JSON.stringify(e))},Pe=e=>JSON.parse(localStorage.getItem(oe(e))),Ke=e=>{const t=localStorage.getItem(W(e));if(!t)return;const n=Ue(t),a=document.createElement("a"),r=`lastConfirmedClaim-${new Date().toISOString()}.json`;a.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(n)),a.setAttribute("download",r),a.style.display="none",document.body.appendChild(a),a.click(),document.body.removeChild(a)},Ue=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var h={saveConfirmedClaim:Oe,getConfirmedClaim:qe,saveClaimAlice:Fe,getClaimAlice:Pe,downloadLastClaim:Ke};const He=(e,t=2)=>new l.default(e+"").toFixed(t),Ge=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.minus(a).toFixed()},le=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.plus(a).toFixed()},Ye=(e,t=2)=>new l.default(e+"").toFixed(t),O=e=>{if(e==="0"||e===0)return"10";if(ue(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=ce(10,n);console.log({p:a});const r=k(e,a);console.log({b:r});const c=O(r);console.log({c});const f=R(c,a);return console.log({d:f}),f}else{const t=k(R(e,10,0,l.default.ROUND_UP),10);return t===e+""?O(le(e,1)):t}},k=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const c=new l.default(t+"");return r=r.times(c).toFixed(),n=parseInt(n),q(r,n,a)},Je=(e,t,n=18)=>k(e,t,n),R=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const c=new l.default(t+"");return r=r.div(c).toFixed(),n=parseInt(n),q(r,n,a)},je=(e,t,n=18)=>R(e,t,n),ce=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.pow(a)},ze=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.eq(a)},ue=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lt(a)},Xe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gt(a)},Qe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lte(a)},Ze=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gte(a)},et=e=>new l.default(e+"").isNaN(),q=(e,t,n)=>new l.default(e+"").dp(parseInt(t),n).toFixed();var d={minus:Ge,plus:le,times:k,div:R,pow:ce,eq:ze,lt:ue,gt:Xe,lte:Qe,gte:Ze,isNaN:et,dp:q,negated:e=>new l.default(e+"").negated().toFixed(),timesFloor:Je,divFloor:je,toFixed:He,roundUpToTen:O,roundDecimals:Ye,abs:e=>new l.default(e+"").abs().toFixed()};const F=(e,t=18)=>{if(!e)return;const r=new A.default().utils.fromWei(e).split("."),c=r[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(r[1])if(t){const f=r[1].substring(0,t).replace(/0+$/,"");return c+`${f?"."+f:""}`}else return c+"."+r[1];else return c},I="undefined",de=e=>{const t=h.getConfirmedClaim(e.addresses[o]);if(t){const n=t.closed===1,a=n?t.id+1:t.id,r=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(r!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[u]!==I)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${I}`);const c=n?e.amount:d.plus(d.minus(t.cumulativeDebits[u],t.cumulativeDebits[o]),e.amount);pe(c,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[u]!==I)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${I}`);const n=e.amount;pe(n,e.cumulativeDebits)}return tt(e),!0},tt=e=>{if(e.closed===0){const t=`You ${d.gt(e.amount,"0")?"receive":"spend"}: ${F(d.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},pe=(e,t)=>{if(d.gt(e,0)){if(!d.eq(t[o],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: 0`);if(!d.eq(t[u],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: ${e}`)}else{if(!d.eq(t[o],d.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: ${-e}`);if(!d.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: 0`)}},nt=e=>{let t=de(e);if(t){const n=h.getClaimAlice(e.addresses[o]);n&&(t=P(e,n))}return t},P=(e,t,n=!1)=>{if(n&&t.closed===1){if(t.id+1!==e.id)throw new Error(`Invalid claim id: ${e.id} - channel was closed and saved claim id: ${t.id}`)}else if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(n&&t.closed===1){if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce} - channel was closed`)}else{const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`)}if(t.cumulativeDebits[o]!==e.cumulativeDebits[o])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[o]} - saved claim: ${t.cumulativeDebits[o]}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.addresses[o]!==e.addresses[o])throw new Error(`Invalid address of Client: ${e.addresses[o]} - saved claim: ${t.addresses[o]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Server: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},at=(e,t)=>{st(e,t);const n=h.getConfirmedClaim(e.addresses[o]);return n?P(e,n,!0):!0},st=(e,t)=>{const n=d.plus(t,d.minus(e.cumulativeDebits[u],e.cumulativeDebits[o])),a=`You are withdrawing: ${F(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var S={isValidNewClaim:de,isValidClaimAlice:nt,areEqualClaims:P,isValidWithdraw:at},rt=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],$=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const K="undefined",U="undefined",it="undefined",T=(e,t=K,n=rt)=>{const a=new A.default(e);return new a.eth.Contract(n,t)},v=async(e,t,n)=>await e.methods[t](...n).call(),ye=async(e,t,n,a,r,c)=>{const f=new A.default(c),Y=await t.methods[n](...a).estimateGas({from:e}),At={gasPrice:await f.eth.getGasPrice(),from:e,gas:Y};await t.methods[n](...a).send(At).on("transactionHash",J=>{p(r,{txHash:J})}).on("receipt",J=>{p(r,{receipt:J})})};var g={getVaultBalance:async(e,t)=>{const n=T(t);return{balance:await v(n,"balanceOf",[e])}},withdrawConsensually:async(e,t)=>{const n=T(t),a=new A.default(t),r=e.addresses[0],c=await n.methods.withdrawAlice(e).estimateGas({from:r}),Y={gasPrice:await a.eth.getGasPrice(),from:r,gas:c};await n.methods.withdrawAlice(e).send(Y).on("transactionHash",N=>{console.log("txHash",N),p(s.withdrawHash,N)}).on("receipt",N=>{console.log("receipt",N),p(s.withdrawReceipt,N)})},getDegaBalance:async(e,t)=>{const n=T(t,U,$);return await v(n,"balanceOf",[e])},depositDega:async(e,t,n)=>{const a=T(n);await ye(t,a,"deposit",[e],s.depositDega,n)},approveDega:async(e,t,n)=>{const a=T(n,U,$);await ye(t,a,"approve",[K,e],s.approveDega,n)},getBtcbBalance:async(e,t)=>{const n=T(t,it,$);return await v(n,"balanceOf",[e])},getBnbBalance:async(e,t)=>await new A.default(t).eth.getBalance(e),getLastClosedChannel:async(e,t)=>{const n=T(t),a=await v(n,"emergencyWithdrawRequests",[e]);return a.claimTransaction.id.toString()!=="0"?a.claimTransaction.id.toString():(await v(n,"withdrawTransactions",[e])).id.toString()},getDegaAllowance:async(e,t)=>{const n=T(t,U,$);return await v(n,"allowance",[e,K])}};const ot=async(e,t)=>{S.isValidNewClaim(e);{if(!_(e))throw new Error("Server's signature is not verified");const n=await G(e,t);if(await ge(e,t)===!0&&n)return await H(e),h.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},me=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:ne,primaryType:"Claim",message:{id:e.id,alice:e.addresses[o],bob:e.addresses[u],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[o],cumulativeDebitBob:e.cumulativeDebits[u],closed:e.closed}}),_=(e,t=!1)=>{let n=1;t&&(n=0);const a=me(e),r=e.signatures[n];try{return b.recoverTypedSignature({data:a,signature:r,version:b.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},lt=async(e,t)=>{const n=we(e);S.isValidNewClaim(e);const a=await G(e,t);if(n&&a){if(await ge(e,t)===!0)return await H(e),h.saveClaimAlice(e),e;throw new Error("Not enough balance")}},we=e=>{const t=h.getClaimAlice(e.addresses[o]);if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},ge=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:ct(e,n,t)},ct=async(e,t,n)=>{try{const{balance:a}=await g.getVaultBalance(e.addresses[t],n);return!!d.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},H=async e=>{const t=me(e),n=e.addresses[o];e.signatures[o]=await te(t,n)},ut=async e=>{if(S.isValidClaimAlice(e))if(_(e))h.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},dt=async(e,t)=>{const n=we(e);let a;try{a=(await g.getVaultBalance(e.addresses[o],t)).balance}catch{throw new Error("Can't get balance from Vault")}const r=S.isValidWithdraw(e,a),c=await G(e,t);if(r&&n&&c)return await H(e),h.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},G=async(e,t)=>{const n=await g.getLastClosedChannel(e.addresses[o],t);if(d.eq(d.plus(n,"1"),e.id))return!0;throw new Error("Invalid channel id")};var C={cashin:lt,claimControfirmed:ut,cashout:ot,signWithdraw:dt,lastClaim:(e,t)=>{const n=h.getConfirmedClaim(t);if(!n&&e===null)return!0;if(!n&&e&&e.nonce)return h.saveConfirmedClaim(e),!0;if(n&&e===null)return n;if(e.id>=n.id&&e.nonce>n.nonce)return _(e,!0)&&_(e)?(h.saveConfirmedClaim(e),!0):n;try{return S.areEqualClaims(e,n)===!0&&e.signatures[o]===n.signatures[o]&&e.signatures[u]===n.signatures[u]?!0:n}catch{return n}},downloadLastClaim:h.downloadLastClaim,getConfirmedClaim:h.getConfirmedClaim};const pt=async e=>{try{await y()}catch(n){throw i(s.claimNotSigned,n),n}const t=w();try{const n=await C.cashin(e,t);return p(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},yt=async e=>{const t=w();try{return await g.getVaultBalance(e,t)}catch(n){console.error(n)}},mt=async e=>{try{await y()}catch(t){throw i(s.claimNotConfirmed,t),t}try{await C.claimControfirmed(e),p(s.claimConfirmed,{claim:e})}catch(t){throw i(s.claimNotConfirmed,{message:t,claim:e}),t}},wt=async e=>{try{await y()}catch(n){throw i(s.winNotConfirmed,n),n}const t=w();try{const n=await C.cashout(e,t);return p(s.winClaimSigned,{claim:n}),n}catch(n){throw i(s.winNotConfirmed,n),n}},gt=async e=>{if(e&&e.hasOwnProperty("error")){i(s.claimNotSynced,e.error);return}const{address:t}=await L();if(e&&e.addresses[o].toLowerCase()!==t.toLowerCase()){i(s.claimNotSynced,e.error);return}const n=C.lastClaim(e,t);if(n===!0)p(s.claimSynced,"Claims are synced");else return i(s.claimNotSynced,{message:"Claims are not synced",lastClaim:n}),n},ht=async e=>{try{await y()}catch(n){throw i(s.claimNotSigned,n),n}const t=w();try{const n=await C.signWithdraw(e,t);return p(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},ft=async e=>{try{await y()}catch(n){throw i(s.withdraw,n),n}const t=w();try{await g.withdrawConsensually(e,t),p(s.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){console.log("error",n),i(s.withdraw,n)}},bt=async e=>{if(!e)return"0";try{await y()}catch(r){throw i(s.getBalance,r),r}let t="0";const n=w(),a=C.getConfirmedClaim(e);if(a&&a.closed===1&&await g.getLastClosedChannel(e,n)!==a.id.toString())return t;try{t=d.plus(t,(await g.getVaultBalance(e,n)).balance)}catch(r){i(s.getBalance,r)}return a&&a.closed!==1&&(t=d.plus(t,d.minus(a.cumulativeDebits[u],a.cumulativeDebits[o]))),t};var m={cashin:pt,claimControfirmed:mt,cashout:wt,lastClaim:gt,signWithdraw:ht,withdrawConsensually:ft,getVaultBalance:yt,downloadLastClaim:C.downloadLastClaim,getConfirmedClaim:C.getConfirmedClaim,getTotalBalance:bt};const Tt=async(e,t)=>{try{y()}catch(a){throw i(s.depositDega,a),a}const n=w();try{await Ct(e,t,n)}catch(a){throw i(s.depositDega,a),a}try{await g.depositDega(e,t,n)}catch(a){throw i(s.depositDega,a),a}},Ct=async(e,t,n)=>{let a;try{a=await g.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(d.lt(a,e))throw new Error("The balance of Dega is not enough")};var D={depositDega:Tt,approveDega:async(e,t)=>{try{y()}catch(a){throw i(s.approveDega,a),a}const n=w();try{await g.approveDega(e,t,n)}catch(a){throw i(s.approveDega,a),a}},getDegaBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=w();let n="0";try{n=await g.getDegaBalance(e,t)}catch{throw new Error("Can't get balance of Dega")}return n.toString()},getBtcbBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=w();let n="0";try{n=await g.getBtcbBalance(e,t)}catch{throw new Error("Can't get balance of BTCB")}return n.toString()},getBnbBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=w();let n="0";try{n=await g.getBnbBalance(e,t)}catch{throw new Error("Can't get balance of BNB")}return n.toString()},getDegaAllowance:async e=>{try{y()}catch(n){throw i(s.approveDega,n),n}const t=w();try{return await g.getDegaAllowance(e,t)}catch(n){throw i(s.approveDega,n),n}}};const vt="undefined",Dt="undefined",Nt="undefined",Et="undefined";return{getAddress:L,isMetamaskInstalled:ee,isRightNet:Q,setRightNet:Se,addEventListener:fe,addEventListenerWS:be,emitEventWS:Te,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:r}=JSON.parse(e);switch(r&&i(s.general,r),t){case Et:{const c=await m.lastClaim(n);if(c)return{action:t,claim:c,context:a};break}case vt:{if(!n.signatures[o]&&!n.signatures[u]){const c=await m.cashin(n);return{action:t,claim:c,context:a}}else if(n.signatures[o]&&n.signatures[u])await m.claimControfirmed(n);else throw new Error("Invalid claim");break}case Dt:if(!n.signatures[o]&&n.signatures[u]){const c=await m.cashout(n);return{action:t,claim:c,context:a}}else throw new Error("Invalid claim");case Nt:{if(!n.signatures[o]&&!n.signatures[u]){const c=await m.signWithdraw(n);return{action:t,claim:c,context:a}}else if(n.signatures[o]&&n.signatures[u])await m.claimControfirmed(n),p(s.withdrawSigned,"Consensual withdraw signed.");else throw new Error("Invalid claim");break}}}},signChallenge:B.signChallenge,setToken:B.setToken,getToken:B.getToken,isLogged:B.isLogged,getVaultBalance:m.getVaultBalance,getTotalBalance:m.getTotalBalance,downloadLastClaim:m.downloadLastClaim,getConfirmedClaim:m.getConfirmedClaim,formatNumber:F,pay:m.cashin,payReceived:m.claimControfirmed,win:m.cashout,depositDega:D.depositDega,approveDega:D.approveDega,getDegaAllowance:D.getDegaAllowance,getDegaBalance:D.getDegaBalance,getBtcbBalance:D.getBtcbBalance,getBnbBalance:D.getBnbBalance,sendConsensualWithdraw:async function(){const{address:e}=await L(),t=m.getConfirmedClaim(e);if(!t.closed)throw new Error("Withdraw claim not found.");await m.withdrawConsensually(t)}}});
