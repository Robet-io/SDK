(function(y,b){typeof exports=="object"&&typeof module!="undefined"?module.exports=b(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],b):(y=typeof globalThis!="undefined"?globalThis:y||self,y.cryptoSDK=b(y["@metamask/eth-sig-util"],y.bignumber.js,y.Web3))})(this,function(y,b,ae){"use strict";function W(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var i=W(b),q=W(ae);const re=e=>{document.addEventListener(D,e)},d=(e,t)=>{const n=new CustomEvent(D,{detail:{type:e,msg:t}});document.dispatchEvent(n)},s=(e,t)=>{const n=new CustomEvent(D,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash"},D="cryptoSDK",I="97",ie="BSC Testnet",se="https://data-seed-prebsc-1-s1.binance.org",oe="https://testnet.bscscan.com/",ce="BNB",le="BNB",ue="18",w=async()=>{const e=P(),t=g();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+_(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${_(e)}`;throw new Error(a)}else return!0}},_=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),_(I));else return t},P=()=>[Number(I)],O=async()=>{try{const e=await w();return d(r.network,e),e}catch(e){return s(r.network,e),!1}},de=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(I).toString(16)}`,chainName:ie,nativeCurrency:{name:ce,symbol:le,decimals:ue},rpcUrls:[se],blockExplorerUrls:[oe]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await w()?d(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},g=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},K=async e=>{try{await O()?d(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},me=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await K(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await K(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},pe=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},L=()=>!!(window.ethereum||window.web3),ye=async()=>{if(!L()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=P();try{await w(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await pe()}}catch(t){throw s(r.address,t),new Error(t)}},F=async(e,t)=>(await w(),await g().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));me();const H={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0xA0Af3739fBC126C287D2fd0b5372d939Baa36B17"},we=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:H,primaryType:"Signin",message:{method:"signin",text:e}}),he=async(e,t)=>{const n=we(e);try{const a=await F(n,t);return d(r.challengeSigned,{signature:a}),a}catch(a){throw s(r.challengeNotSigned,a),a}},U="authToken",Y="expireToken",ge=12e5,fe=e=>{try{localStorage.setItem(U,e),localStorage.setItem(Y,Date.now()+ge),d(r.token,"JWT token received")}catch(t){s(r.token,t)}},J=()=>localStorage.getItem(U);var N={signChallenge:he,setToken:fe,getToken:J,isLogged:()=>{if(J()){const t=localStorage.getItem(Y);if(t&&t>Date.now())return!0}return!1}};const T={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},Ce=e=>{localStorage.setItem(T.claimConfirmed,JSON.stringify(e))},be=()=>JSON.parse(localStorage.getItem(T.claimConfirmed)),Te=e=>{localStorage.setItem(T.claimAlice,JSON.stringify(e))},ve=()=>JSON.parse(localStorage.getItem(T.claimAlice)),Ne=()=>{const e=localStorage.getItem(T.claimConfirmed);if(!e)return;const t=Ee(e),n=document.createElement("a"),a=`lastConfirmedClaim-${new Date().toISOString()}.json`;n.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",a),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},Ee=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var m={saveConfirmedClaim:Ce,getConfirmedClaim:be,saveClaimAlice:Te,getClaimAlice:ve,downloadLastClaim:Ne};const Se=(e,t=2)=>new i.default(e+"").toFixed(t),Ae=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.minus(a).toFixed()},G=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.plus(a).toFixed()},ke=(e,t=2)=>new i.default(e+"").toFixed(t),B=e=>{if(e==="0"||e===0)return"10";if(z(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=j(10,n);console.log({p:a});const u=E(e,a);console.log({b:u});const l=B(u);console.log({c:l});const x=S(l,a);return console.log({d:x}),x}else{const t=E(S(e,10,0,i.default.ROUND_UP),10);return t===e+""?B(G(e,1)):t}},E=(e,t,n=18,a=i.default.ROUND_FLOOR)=>{let u=new i.default(e+"");const l=new i.default(t+"");return u=u.times(l).toFixed(),n=parseInt(n),R(u,n,a)},De=(e,t,n=18)=>E(e,t,n),S=(e,t,n=18,a=i.default.ROUND_FLOOR)=>{let u=new i.default(e+"");const l=new i.default(t+"");return u=u.div(l).toFixed(),n=parseInt(n),R(u,n,a)},Ie=(e,t,n=18)=>S(e,t,n),j=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.pow(a)},_e=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.eq(a)},z=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.lt(a)},Be=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.gt(a)},Re=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.lte(a)},Me=(e,t)=>{const n=new i.default(e+""),a=new i.default(t+"");return n.gte(a)},$e=e=>new i.default(e+"").isNaN(),R=(e,t,n)=>new i.default(e+"").dp(parseInt(t),n).toFixed();var h={minus:Ae,plus:G,times:E,div:S,pow:j,eq:_e,lt:z,gt:Be,lte:Re,gte:Me,isNaN:$e,dp:R,negated:e=>new i.default(e+"").negated().toFixed(),timesFloor:De,divFloor:Ie,toFixed:Se,roundUpToTen:B,roundDecimals:ke};const c=0,o=1,A="0xeA085D9698651e76750F07d0dE0464476187b3ca",X=e=>{const t=m.getConfirmedClaim();if(t){const n=t.closed===1,a=n?t.id+1:t.id,u=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(u!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[o]!==A)throw new Error(`Invalid address of Server: ${e.addresses[o]} - expected: ${A}`);const l=n?e.amount:h.plus(h.minus(t.cumulativeDebits[o],t.cumulativeDebits[c]),e.amount);Q(l,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[o]!==A)throw new Error(`Invalid address of Server: ${e.addresses[o]} - expected: ${A}`);const n=e.amount;Q(n,e.cumulativeDebits)}return!0},Q=(e,t)=>{if(h.gt(e,0)){if(!h.eq(t[c],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: 0`);if(!h.eq(t[o],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[o]} - expected: ${e}`)}else{if(!h.eq(t[c],h.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: ${-e}`);if(!h.eq(t[o],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[o]} - expected: 0`)}},Ve=e=>{let t=X(e);if(t){const n=m.getClaimAlice();n&&(t=M(e,n))}return t},M=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[c]!==e.cumulativeDebits[c])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[c]} - saved claim: ${t.cumulativeDebits[c]}`);if(t.cumulativeDebits[o]!==e.cumulativeDebits[o])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[o]} - saved claim: ${t.cumulativeDebits[o]}`);if(t.addresses[c]!==e.addresses[c])throw new Error(`Invalid address of Client: ${e.addresses[c]} - saved claim: ${t.addresses[c]}`);if(t.addresses[o]!==e.addresses[o])throw new Error(`Invalid address of Server: ${e.addresses[o]} - saved claim: ${t.addresses[o]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);return!0};var v={isValidNewClaim:X,isValidClaimAlice:Ve,areEqualClaims:M,isValidWithdraw:e=>{const t=m.getConfirmedClaim();return t?M(e,t,!0):!1}},xe=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}];const We="0xA0Af3739fBC126C287D2fd0b5372d939Baa36B17",Z=(e,t=We,n=xe)=>{const a=new q.default(e);return new a.eth.Contract(n,t)},qe=async(e,t,n)=>await e.methods[t](n).call();var $={getVaultBalance:async(e,t)=>{const n=Z(t);return{balance:await qe(n,"balanceOf",e)}},withdrawConsensually:async(e,t)=>{const n=Z(t),a=new q.default(t),u=e.addresses[0];try{const l=await n.methods.withdrawAlice(e).estimateGas({from:u}),Ye={gasPrice:await a.eth.getGasPrice(),from:u,gas:l};try{await n.methods.withdrawAlice(e).send(Ye).on("transactionHash",f=>{console.log("txHash",f),d(r.withdrawHash,f)}).on("receipt",f=>{console.log("receipt",f),d(r.withdrawReceipt,f)})}catch(f){throw new Error(f)}}catch(l){throw new Error(l)}}};const Pe=async(e,t)=>{v.isValidNewClaim(e);{if(!k(e))throw new Error("Server's signature is not verified");if(await ne(e,t)===!0)return await V(e),m.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},ee=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:H,primaryType:"Claim",message:{id:e.id,alice:e.addresses[c],bob:e.addresses[o],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[c],cumulativeDebitBob:e.cumulativeDebits[o],closed:e.closed}}),k=(e,t=!1)=>{let n=1;t&&(n=0);const a=ee(e),u=e.signatures[n];try{return y.recoverTypedSignature({data:a,signature:u,version:y.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},Oe=async(e,t)=>{const n=te(e);if(v.isValidNewClaim(e),n){if(await ne(e,t)===!0)return await V(e),m.saveClaimAlice(e),e;throw new Error("Not enough balance")}},te=e=>{const t=m.getClaimAlice();if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},ne=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:await Ke(e,n,t)},Ke=async(e,t,n)=>{try{const{balance:a}=await $.getVaultBalance(e.addresses[t],n);return!!h.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},V=async e=>{const t=ee(e),n=e.addresses[c];e.signatures[c]=await F(t,n)};var C={cashin:Oe,claimControfirmed:async e=>{if(v.isValidClaimAlice(e))if(k(e))m.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},cashout:Pe,signWithdraw:async(e,t)=>{const n=te(e);if(v.isValidWithdraw(e)&&n)return await V(e),m.saveClaimAlice(e),e},lastClaim:e=>{const t=m.getConfirmedClaim();if(!t&&e===null)return!0;if(!t&&e&&e.nonce)return m.saveConfirmedClaim(e),!0;if(t&&e===null)return t;if(e.id>=t.id&&e.nonce>t.nonce)return k(e,!0)&&k(e)?(m.saveConfirmedClaim(e),!0):t;try{return v.areEqualClaims(e,t)===!0&&e.signatures[c]===t.signatures[c]&&e.signatures[o]===t.signatures[o]?!0:t}catch{return t}},downloadLastClaim:m.downloadLastClaim},p={cashin:async e=>{try{await w()}catch(n){throw s(r.claimNotSigned,n),n}const t=g();try{const n=await C.cashin(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},claimControfirmed:async e=>{try{await w()}catch(t){throw s(r.claimNotConfirmed,t),t}try{await C.claimControfirmed(e),d(r.claimConfirmed,{claim:e})}catch(t){throw s(r.claimNotConfirmed,{error:t,claim:e}),t}},cashout:async e=>{try{await w()}catch(n){throw s(r.winNotConfirmed,n),n}const t=g();try{const n=await C.cashout(e,t);return d(r.winClaimSigned,{claim:n}),n}catch(n){throw s(r.winNotConfirmed,n),n}},lastClaim:e=>{if(e&&e.hasOwnProperty("error")){s(r.claimNotSynced,e.error);return}const t=C.lastClaim(e);if(t===!0)d(r.claimSynced,"Claims are synced");else return s(r.claimNotSynced,{lastClaim:t}),t},signWithdraw:async e=>{try{await w()}catch(n){throw s(r.claimNotSigned,n),n}const t=g();try{const n=await C.signWithdraw(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},withdrawConsensually:async e=>{try{await w()}catch(n){throw s(r.withdraw,n),n}const t=g();try{await $.withdrawConsensually(e,t),d(r.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){s(r.withdraw,n)}},getVaultBalance:async e=>{const t=g();try{return await $.getVaultBalance(e,t)}catch(n){console.error(n)}},downloadLastClaim:C.downloadLastClaim};const Le={}.CSDK_TYPE_CASHIN,Fe={}.CSDK_TYPE_CASHOUT,He="WITHDRAW",Ue={}.CSDK_TYPE_HANDSHAKE;return{getAddress:ye,isMetamaskInstalled:L,isRightNet:O,setRightNet:de,addEventListener:re,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:u}=JSON.parse(e);if(u)throw new Error(u);switch(t){case Ue:{const l=p.lastClaim(n);if(l)return{action:t,claim:l,context:a};break}case Le:{if(!n.signatures[c]&&!n.signatures[o]){const l=await p.cashin(n);return{action:t,claim:l,context:a}}else if(n.signatures[c]&&n.signatures[o])await p.claimControfirmed(n);else throw new Error("Invalid claim");break}case Fe:if(!n.signatures[c]&&n.signatures[o]){const l=await p.cashout(n);return{action:t,claim:l,context:a}}else throw new Error("Invalid claim");case He:{if(!n.signatures[c]&&!n.signatures[o]){const l=await p.signWithdraw(n);return{action:t,claim:l,context:a}}else if(n.signatures[c]&&n.signatures[o])await p.claimControfirmed(n),await p.withdrawConsensually(n);else throw new Error("Invalid claim");break}default:throw new Error("Not supported")}}},signChallenge:N.signChallenge,setToken:N.setToken,getToken:N.getToken,isLogged:N.isLogged,getVaultBalance:p.getVaultBalance,downloadLastClaim:p.downloadLastClaim,pay:p.cashin,payReceived:p.claimControfirmed,win:p.cashout}});
