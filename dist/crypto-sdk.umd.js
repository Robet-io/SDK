(function(i,c){typeof exports=="object"&&typeof module!="undefined"?module.exports=c(require("@metamask/eth-sig-util")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util"],c):(i=typeof globalThis!="undefined"?globalThis:i||self,i.cryptoSDK=c(i["@metamask/eth-sig-util"]))})(this,function(i){"use strict";const c=e=>{document.addEventListener(h,e)},o=(e,t)=>{const n=new CustomEvent(h,{detail:{type:e,msg:t}});document.dispatchEvent(n)},a=(e,t)=>{const n=new CustomEvent(h,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",paymentConfirmed:"paymentConfirmed",paymentNotConfirmed:"paymentNotConfirmed"},h="cryptoSDK",l=97,I="BSC Testnet2",S="https://data-seed-prebsc-1-s1.binance.org",$="https://testnet.bscscan.com/",R="BNB",D="BNB",_=18,d=async()=>{const e=f(),t=p();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const s="Please change your network on Metamask. Valid networks are: "+g(e);throw new Error(s)}}else if(Number(n)!==Number(e)){const s=`Please set your network on Metamask to ${g(e)}`;throw new Error(s)}else return!0}},g=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let s=0;s<e.length;s++)n.push(t[e[s]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),g(l));else return t},f=()=>[Number(l)],y=async()=>{try{const e=await d();return o(r.network,e),e}catch(e){return a(r.network,e),!1}},M=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(l).toString(16)}`,chainName:I,nativeCurrency:{name:R,symbol:D,decimals:_},rpcUrls:[S],blockExplorerUrls:[$]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await d()?o(r.network,"Success, network is set to the right one"):a(r.network,"Add net error: network is not changed")}catch(s){a(r.network,`Add net error: ${s}`)}}else throw window.web3?(a(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(a(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},p=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw a(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},v=async e=>{try{await y()?o(r.chainChanged,{chainId:e}):a(r.chainChanged,{chainId:e})}catch{a(r.chainChanged,{chainId:e})}},T=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId=l),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),o(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await v(e)}),window.ethereum.on("message",async e=>{o(r.message,{message:e})}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),a(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),o(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await v(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),a(r.error,e)}))},V=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},C=()=>!!(window.ethereum||window.web3),B=async()=>{if(!C()){const t="Metamask is not installed, unable to get user address";throw a(r.metamaskNotInstalled,t),new Error(t)}const e=f();try{await d(e)}catch(t){throw a(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await V()}}catch(t){throw a(r.address,t),new Error(t)}};T();const w={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"};var m={saveConfirmedClaim:e=>{localStorage.setItem(w.claimConfirmed,JSON.stringify(e))},getConfirmedClaim:async()=>JSON.parse(await localStorage.getItem(w.claimConfirmed)),saveClaimAlice:e=>{localStorage.setItem(w.claimAlice,JSON.stringify(e))},getClaimAlice:async()=>JSON.parse(await localStorage.getItem(w.claimAlice))};const u="0xeA085D9698651e76750F07d0dE0464476187b3ca",E=async e=>{const t=await m.getConfirmedClaim();if(t){if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}`);if(t.nonce+1!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - last claim nonce: ${t.nonce}`);if(e.addresses[1]!==u)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${u}`);const s=t.cumulativeDebits[1]-t.cumulativeDebits[0]+e.amount;N(s,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[1]!==u)throw new Error(`Invalid claim Server address: ${e.addresses[1]} - expected: ${u}`);const n=e.amount;N(n,e.cumulativeDebits)}return!0},N=(e,t)=>{if(e>0){if(t[0]!==0)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: 0`);if(t[1]!==e)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: ${e}`)}else{if(t[0]!==-e)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: ${-e}`);if(t[1]!==0)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: 0`)}},x=async e=>{const t=await m.getClaimAlice();let n=!1;return t?n=P(e,t):n=await E(e),n},P=(e,t)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(t.nonce!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.amount!==e.amount)throw new Error(`Invalid claim amount: ${e.amount} - saved claim amount: ${t.amount}`);if(t.cumulativeDebits[0]!==e.cumulativeDebits[0])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[0]} - saved claim: ${t.cumulativeDebits[0]}`);if(t.cumulativeDebits[1]!==e.cumulativeDebits[1])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[1]} - saved claim: ${t.cumulativeDebits[1]}`);if(t.type!==e.type)throw new Error(`Invalid claim type: ${e.type} - saved claim type: ${t.type}`);if(t.addresses[0]!==e.addresses[0])throw new Error(`Invalid address of Client: ${e.addresses[0]} - saved claim: ${t.addresses[0]}`);if(t.addresses[1]!==e.addresses[1])throw new Error(`Invalid address of Server: ${e.addresses[1]} - saved claim: ${t.addresses[1]}`);return!0};var b={isValidNewClaim:E,isValidClaimAlice:x};const O={name:"BSC Testnet",version:"1",chainId:97,verifyingContract:"0xBC8655Fbb4ec8E3cc9edef00f05841A776907311"};function k(e){return{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"}]},domain:O,primaryType:"Claim",message:{id:e.id,alice:e.addresses[0],bob:e.addresses[1],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[0],cumulativeDebitBob:e.cumulativeDebits[1]}}}const H=(e,t=!1)=>{let n=1;t&&(n=0);const s=k(e),F=e.signatures[n];try{return i.recoverTypedSignature({data:s,signature:F,version:i.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},L=async(e,t)=>{if(await b.isValidNewClaim(t)){if(await U()===!0)return await q(t,e),m.saveClaimAlice(t),t;throw new Error("Not enough balance")}},U=async(e,t)=>!0,q=async(e,t)=>{const n=k(e),s=e.addresses[0];e.signatures[0]=await t.request({method:"eth_signTypedData_v4",params:[s,JSON.stringify(n)],from:s})};var A={pay:L,payReceived:async e=>{if(await b.isValidClaimAlice(e))if(H(e))m.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")}};return{getAddress:B,isMetamaskInstalled:C,isRightNet:y,setRightNet:M,addEventListener:c,pay:async e=>{try{await d()}catch(n){throw a(r.claimNotSigned,n),n}const t=p();try{const n=await A.pay(t,e);return o(r.claimSigned,{claim:n}),n}catch(n){throw a(r.claimNotSigned,n),n}},payReceived:async e=>{try{await d()}catch(t){throw a(r.paymentNotConfirmed,t),t}try{await A.payReceived(e),o(r.paymentConfirmed,{claim:e})}catch(t){throw a(r.paymentNotConfirmed,{error:t,claim:e}),t}}}});
