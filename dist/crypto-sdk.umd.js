(function(b,v){typeof exports=="object"&&typeof module!="undefined"?module.exports=v(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],v):(b=typeof globalThis!="undefined"?globalThis:b||self,b.cryptoSDK=v(b["@metamask/eth-sig-util"],b.bignumber.js,b.Web3))})(this,function(b,v,ye){"use strict";function L(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var l=L(v),A=L(ye);const me=e=>{document.addEventListener(R,e)},we=e=>{document.addEventListener(K,e)},d=(e,t)=>{const n=new CustomEvent(R,{detail:{type:e,msg:t}});document.dispatchEvent(n)},ge=e=>{const t=new CustomEvent(K,{detail:JSON.parse(e)});document.dispatchEvent(t)},i=(e,t)=>{const n=new CustomEvent(R,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},s={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getTotalBalance:"getTotalBalance"},R="cryptoSDK",K="cryptoSDK_WS",_="97",be="BSC Testnet",he="https://data-seed-prebsc-1-s1.binance.org",fe="https://testnet.bscscan.com/",Te="BNB",Ce="BNB",ve="18",w=async()=>{const e=H(),t=g();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+x(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${x(e)}`;throw new Error(a)}else return!0}},x=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),x(_));else return t},H=()=>[Number(_)],U=async()=>{try{const e=await w();return d(s.network,e),e}catch(e){return i(s.network,e),!1}},Ne=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(_).toString(16)}`,chainName:be,nativeCurrency:{name:Te,symbol:Ce,decimals:ve},rpcUrls:[he],blockExplorerUrls:[fe]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await w()?d(s.network,"Success, network is set to the right one"):i(s.network,"Add net error: network is not changed")}catch(a){i(s.network,`Add net error: ${a}`)}}else throw window.web3?(i(s.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(i(s.network,"Metamask is not installed"),new Error("Metamask is not installed"))},g=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw i(s.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},G=async e=>{try{await U()?d(s.chainChanged,{chainId:e}):i(s.chainChanged,{chainId:e})}catch{i(s.chainChanged,{chainId:e})}},De=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),d(s.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await G(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),i(s.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),d(s.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await G(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),i(s.error,e)}))},Ee=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},Y=()=>!!(window.ethereum||window.web3),Ae=async()=>{if(!Y()){const t="Metamask is not installed, unable to get user address";throw i(s.metamaskNotInstalled,t),new Error(t)}const e=H();try{await w(e)}catch(t){throw i(s.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await Ee()}}catch(t){throw i(s.address,t),new Error(t)}},J=async(e,t)=>(await w(),await g().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));De();const j={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},Se=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:j,primaryType:"Signin",message:{method:"signin",text:e}}),ke=async(e,t)=>{const n=Se(e);try{const a=await J(n,t);return d(s.challengeSigned,{signature:a}),a}catch(a){throw i(s.challengeNotSigned,a),a}},z="authToken",X="expireToken",Ie=12e5,Me=e=>{try{localStorage.setItem(z,e),localStorage.setItem(X,Date.now()+Ie),d(s.token,"JWT token received")}catch(t){i(s.token,t)}},Q=()=>localStorage.getItem(z);var S={signChallenge:ke,setToken:Me,getToken:Q,isLogged:()=>{if(Q()){const t=localStorage.getItem(X);if(t&&t>Date.now())return!0}return!1}};const N={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},Be=e=>{localStorage.setItem(N.claimConfirmed,JSON.stringify(e))},Re=()=>JSON.parse(localStorage.getItem(N.claimConfirmed)),_e=e=>{localStorage.setItem(N.claimAlice,JSON.stringify(e))},xe=()=>JSON.parse(localStorage.getItem(N.claimAlice)),$e=()=>{const e=localStorage.getItem(N.claimConfirmed);if(!e)return;const t=Ve(e),n=document.createElement("a"),a=`lastConfirmedClaim-${new Date().toISOString()}.json`;n.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",a),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},Ve=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var y={saveConfirmedClaim:Be,getConfirmedClaim:Re,saveClaimAlice:_e,getClaimAlice:xe,downloadLastClaim:$e};const We=(e,t=2)=>new l.default(e+"").toFixed(t),Fe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.minus(a).toFixed()},Z=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.plus(a).toFixed()},qe=(e,t=2)=>new l.default(e+"").toFixed(t),$=e=>{if(e==="0"||e===0)return"10";if(te(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=ee(10,n);console.log({p:a});const r=k(e,a);console.log({b:r});const o=$(r);console.log({c:o});const f=I(o,a);return console.log({d:f}),f}else{const t=k(I(e,10,0,l.default.ROUND_UP),10);return t===e+""?$(Z(e,1)):t}},k=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const o=new l.default(t+"");return r=r.times(o).toFixed(),n=parseInt(n),V(r,n,a)},Oe=(e,t,n=18)=>k(e,t,n),I=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const o=new l.default(t+"");return r=r.div(o).toFixed(),n=parseInt(n),V(r,n,a)},Pe=(e,t,n=18)=>I(e,t,n),ee=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.pow(a)},Le=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.eq(a)},te=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lt(a)},Ke=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gt(a)},He=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lte(a)},Ue=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gte(a)},Ge=e=>new l.default(e+"").isNaN(),V=(e,t,n)=>new l.default(e+"").dp(parseInt(t),n).toFixed();var p={minus:Fe,plus:Z,times:k,div:I,pow:ee,eq:Le,lt:te,gt:Ke,lte:He,gte:Ue,isNaN:Ge,dp:V,negated:e=>new l.default(e+"").negated().toFixed(),timesFloor:Oe,divFloor:Pe,toFixed:We,roundUpToTen:$,roundDecimals:qe,abs:e=>new l.default(e+"").abs().toFixed()};const c=0,u=1,W=(e,t=18)=>{if(!e)return;const r=new A.default().utils.fromWei(e).split("."),o=r[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(r[1])if(t){const f=r[1].substring(0,t).replace(/0+$/,"");return o+`${f?"."+f:""}`}else return o+"."+r[1];else return o},M="0xeA085D9698651e76750F07d0dE0464476187b3ca",ne=e=>{const t=y.getConfirmedClaim();if(t){const n=t.closed===1,a=n?t.id+1:t.id,r=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(r!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const o=n?e.amount:p.plus(p.minus(t.cumulativeDebits[u],t.cumulativeDebits[c]),e.amount);ae(o,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const n=e.amount;ae(n,e.cumulativeDebits)}return Ye(e),!0},Ye=e=>{if(e.closed===0){const t=`You ${p.gt(e.amount,"0")?"receive":"spend"}: ${W(p.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},ae=(e,t)=>{if(p.gt(e,0)){if(!p.eq(t[c],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: 0`);if(!p.eq(t[u],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: ${e}`)}else{if(!p.eq(t[c],p.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: ${-e}`);if(!p.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: 0`)}},Je=e=>{let t=ne(e);if(t){const n=y.getClaimAlice();n&&(t=F(e,n))}return t},F=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[c]!==e.cumulativeDebits[c])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[c]} - saved claim: ${t.cumulativeDebits[c]}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.addresses[c]!==e.addresses[c])throw new Error(`Invalid address of Client: ${e.addresses[c]} - saved claim: ${t.addresses[c]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Server: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},je=(e,t)=>{ze(e,t);const n=y.getConfirmedClaim();return n?F(e,n,!0):!1},ze=(e,t)=>{const n=p.plus(t,p.minus(e.cumulativeDebits[u],e.cumulativeDebits[c])),a=`You are withdrawing: ${W(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var D={isValidNewClaim:ne,isValidClaimAlice:Je,areEqualClaims:F,isValidWithdraw:je},Xe=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],se=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const re="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",ie="0x16B052D944c1b7731d7C240b6072530929C93b40",E=(e,t=re,n=Xe)=>{const a=new A.default(e);return new a.eth.Contract(n,t)},oe=async(e,t,n)=>await e.methods[t](n).call(),Qe=async(e,t)=>{const n=E(t);return{balance:await oe(n,"balanceOf",e)}},Ze=async(e,t)=>{const n=E(t),a=new A.default(t),r=e.addresses[0];try{const o=await n.methods.withdrawAlice(e).estimateGas({from:r}),O={gasPrice:await a.eth.getGasPrice(),from:r,gas:o};try{await n.methods.withdrawAlice(e).send(O).on("transactionHash",T=>{console.log("txHash",T),d(s.withdrawHash,T)}).on("receipt",T=>{console.log("receipt",T),d(s.withdrawReceipt,T)})}catch(T){throw new Error(T)}}catch(o){throw new Error(o)}},et=async(e,t)=>{const n=E(t,ie,se);return await oe(n,"balanceOf",e)},le=async(e,t,n,a,r,o)=>{const f=new A.default(o),O=await t.methods[n](...a).estimateGas({from:e}),ht={gasPrice:await f.eth.getGasPrice(),from:e,gas:O};await t.methods[n](...a).send(ht).on("transactionHash",P=>{d(r,{txHash:P})}).on("receipt",P=>{d(r,{receipt:P})})};var h={getVaultBalance:Qe,withdrawConsensually:Ze,getDegaBalance:et,depositDega:async(e,t,n)=>{const a=E(n);await le(t,a,"deposit",[e],s.depositDega,n)},approveDega:async(e,t,n)=>{const a=E(n,ie,se);await le(t,a,"approve",[re,e],s.approveDega,n)}};const tt=async(e,t)=>{D.isValidNewClaim(e);{if(!B(e))throw new Error("Server's signature is not verified");if(await de(e,t)===!0)return await q(e),y.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},ue=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:j,primaryType:"Claim",message:{id:e.id,alice:e.addresses[c],bob:e.addresses[u],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[c],cumulativeDebitBob:e.cumulativeDebits[u],closed:e.closed}}),B=(e,t=!1)=>{let n=1;t&&(n=0);const a=ue(e),r=e.signatures[n];try{return b.recoverTypedSignature({data:a,signature:r,version:b.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},nt=async(e,t)=>{const n=ce(e);if(D.isValidNewClaim(e),n){if(await de(e,t)===!0)return await q(e),y.saveClaimAlice(e),e;throw new Error("Not enough balance")}},ce=e=>{const t=y.getClaimAlice();if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},de=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:at(e,n,t)},at=async(e,t,n)=>{try{const{balance:a}=await h.getVaultBalance(e.addresses[t],n);return!!p.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},q=async e=>{const t=ue(e),n=e.addresses[c];e.signatures[c]=await J(t,n)};var C={cashin:nt,claimControfirmed:async e=>{if(D.isValidClaimAlice(e))if(B(e))y.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},cashout:tt,signWithdraw:async(e,t)=>{const n=ce(e);let a;try{a=(await h.getVaultBalance(e.addresses[c],t)).balance}catch{throw new Error("Can't get balance from Vault")}if(D.isValidWithdraw(e,a)&&n)return await q(e),y.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},lastClaim:e=>{const t=y.getConfirmedClaim();if(!t&&e===null)return!0;if(!t&&e&&e.nonce)return y.saveConfirmedClaim(e),!0;if(t&&e===null)return t;if(e.id>=t.id&&e.nonce>t.nonce)return B(e,!0)&&B(e)?(y.saveConfirmedClaim(e),!0):t;try{return D.areEqualClaims(e,t)===!0&&e.signatures[c]===t.signatures[c]&&e.signatures[u]===t.signatures[u]?!0:t}catch{return t}},downloadLastClaim:y.downloadLastClaim,getConfirmedClaim:y.getConfirmedClaim};const st=async e=>{try{await w()}catch(n){throw i(s.claimNotSigned,n),n}const t=g();try{const n=await C.cashin(e,t);return d(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},rt=async e=>{const t=g();try{return await h.getVaultBalance(e,t)}catch(n){console.error(n)}},it=async e=>{try{await w()}catch(t){throw i(s.claimNotConfirmed,t),t}try{await C.claimControfirmed(e),d(s.claimConfirmed,{claim:e})}catch(t){throw i(s.claimNotConfirmed,{error:t,claim:e}),t}},ot=async e=>{try{await w()}catch(n){throw i(s.winNotConfirmed,n),n}const t=g();try{const n=await C.cashout(e,t);return d(s.winClaimSigned,{claim:n}),n}catch(n){throw i(s.winNotConfirmed,n),n}},lt=e=>{if(e&&e.hasOwnProperty("error")){i(s.claimNotSynced,e.error);return}const t=C.lastClaim(e);if(t===!0)d(s.claimSynced,"Claims are synced");else return i(s.claimNotSynced,{lastClaim:t}),t},ut=async e=>{try{await w()}catch(n){throw i(s.claimNotSigned,n),n}const t=g();try{const n=await C.signWithdraw(e,t);return d(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},ct=async e=>{try{await w()}catch(n){throw i(s.withdraw,n),n}const t=g();try{await h.withdrawConsensually(e,t),d(s.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){i(s.withdraw,n)}},dt=async e=>{try{await w()}catch(r){throw i(s.getTotalBalance,r),r}const t=g();let n="0";try{n=p.plus(n,(await h.getVaultBalance(e,t)).balance)}catch(r){i(s.getTotalBalance,r)}const a=C.getConfirmedClaim();return a&&(n=p.plus(n,p.minus(a.cumulativeDebits[u],a.cumulativeDebits[c]))),n};var m={cashin:st,claimControfirmed:it,cashout:ot,lastClaim:lt,signWithdraw:ut,withdrawConsensually:ct,getVaultBalance:rt,downloadLastClaim:C.downloadLastClaim,getTotalBalance:dt};const pt=async(e,t)=>{try{w()}catch(a){throw i(s.depositDega,a),a}const n=g();try{await yt(e,t,n)}catch(a){throw i(s.depositDega,a),a}try{await h.depositDega(e,t,n)}catch(a){throw i(s.depositDega,a),a}},yt=async(e,t,n)=>{let a;try{a=await h.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(p.lt(a,e))throw new Error("The balance of Dega is not enough")};var pe={depositDega:pt,approveDega:async(e,t)=>{try{w()}catch(a){throw i(s.approveDega,a),a}const n=g();try{await h.approveDega(e,t,n)}catch(a){throw i(s.approveDega,a),a}}};const mt="CASHIN",wt="CASHOUT",gt="WITHDRAW",bt="HANDSHAKE";return{getAddress:Ae,isMetamaskInstalled:Y,isRightNet:U,setRightNet:Ne,addEventListener:me,addEventListenerWS:we,emitEventWS:ge,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:r}=JSON.parse(e);switch(r&&i(s.general,r),t){case bt:{const o=m.lastClaim(n);if(o)return{action:t,claim:o,context:a};break}case mt:{if(!n.signatures[c]&&!n.signatures[u]){const o=await m.cashin(n);return{action:t,claim:o,context:a}}else if(n.signatures[c]&&n.signatures[u])await m.claimControfirmed(n);else throw new Error("Invalid claim");break}case wt:if(!n.signatures[c]&&n.signatures[u]){const o=await m.cashout(n);return{action:t,claim:o,context:a}}else throw new Error("Invalid claim");case gt:{if(!n.signatures[c]&&!n.signatures[u]){const o=await m.signWithdraw(n);return{action:t,claim:o,context:a}}else if(n.signatures[c]&&n.signatures[u])await m.claimControfirmed(n),await m.withdrawConsensually(n);else throw new Error("Invalid claim");break}}}},signChallenge:S.signChallenge,setToken:S.setToken,getToken:S.getToken,isLogged:S.isLogged,getVaultBalance:m.getVaultBalance,getTotalBalance:m.getTotalBalance,downloadLastClaim:m.downloadLastClaim,formatNumber:W,pay:m.cashin,payReceived:m.claimControfirmed,win:m.cashout,depositDega:pe.depositDega,approveDega:pe.approveDega}});
