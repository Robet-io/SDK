(function(h,D){typeof exports=="object"&&typeof module!="undefined"?module.exports=D(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],D):(h=typeof globalThis!="undefined"?globalThis:h||self,h.cryptoSDK=D(h["@metamask/eth-sig-util"],h.bignumber.js,h.Web3))})(this,function(h,D,ye){"use strict";function U(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var c=U(D),N=U(ye);const me=e=>{document.addEventListener(_,e)},we=e=>{document.addEventListener(G,e)},d=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t}});document.dispatchEvent(n)},ge=e=>{const t=new CustomEvent(G,{detail:JSON.parse(e)});document.dispatchEvent(t)},s=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getBalance:"getBalance"},_="cryptoSDK",G="cryptoSDK_WS",x="97",be="BSC Testnet",he="https://data-seed-prebsc-1-s1.binance.org",fe="https://testnet.bscscan.com/",Te="BNB",Ce="BNB",ve="18",y=async()=>{const e=Y(),t=m();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+$(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${$(e)}`;throw new Error(a)}else return!0}},$=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),$(x));else return t},Y=()=>[Number(x)],J=async()=>{try{const e=await y();return d(r.network,e),e}catch(e){return s(r.network,e),!1}},De=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(x).toString(16)}`,chainName:be,nativeCurrency:{name:Te,symbol:Ce,decimals:ve},rpcUrls:[he],blockExplorerUrls:[fe]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await y()?d(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},m=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},j=async e=>{try{await J()?d(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},Ne=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await j(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await j(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},Ee=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},z=()=>!!(window.ethereum||window.web3),Be=async()=>{if(!z()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=Y();try{await y(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await Ee()}}catch(t){throw s(r.address,t),new Error(t)}},X=async(e,t)=>(await y(),await m().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));Ne();const Q={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},Ae=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:Q,primaryType:"Signin",message:{method:"signin",text:e}}),Se=async(e,t)=>{const n=Ae(e);try{const a=await X(n,t);return d(r.challengeSigned,{signature:a}),a}catch(a){throw s(r.challengeNotSigned,a),a}},Z="authToken",ee="expireToken",ke=12e5,Ie=e=>{try{localStorage.setItem(Z,e),localStorage.setItem(ee,Date.now()+ke),d(r.token,"JWT token received")}catch(t){s(r.token,t)}},te=()=>localStorage.getItem(Z);var S={signChallenge:Se,setToken:Ie,getToken:te,isLogged:()=>{if(te()){const t=localStorage.getItem(ee);if(t&&t>Date.now())return!0}return!1}};const E={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},Me=e=>{localStorage.setItem(E.claimConfirmed,JSON.stringify(e))},Re=()=>JSON.parse(localStorage.getItem(E.claimConfirmed)),_e=e=>{localStorage.setItem(E.claimAlice,JSON.stringify(e))},xe=()=>JSON.parse(localStorage.getItem(E.claimAlice)),$e=()=>{const e=localStorage.getItem(E.claimConfirmed);if(!e)return;const t=Ve(e),n=document.createElement("a"),a=`lastConfirmedClaim-${new Date().toISOString()}.json`;n.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",a),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},Ve=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var w={saveConfirmedClaim:Me,getConfirmedClaim:Re,saveClaimAlice:_e,getClaimAlice:xe,downloadLastClaim:$e};const Fe=(e,t=2)=>new c.default(e+"").toFixed(t),We=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.minus(a).toFixed()},ne=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.plus(a).toFixed()},Oe=(e,t=2)=>new c.default(e+"").toFixed(t),V=e=>{if(e==="0"||e===0)return"10";if(re(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=ae(10,n);console.log({p:a});const i=k(e,a);console.log({b:i});const o=V(i);console.log({c:o});const f=I(o,a);return console.log({d:f}),f}else{const t=k(I(e,10,0,c.default.ROUND_UP),10);return t===e+""?V(ne(e,1)):t}},k=(e,t,n=18,a=c.default.ROUND_FLOOR)=>{let i=new c.default(e+"");const o=new c.default(t+"");return i=i.times(o).toFixed(),n=parseInt(n),F(i,n,a)},Pe=(e,t,n=18)=>k(e,t,n),I=(e,t,n=18,a=c.default.ROUND_FLOOR)=>{let i=new c.default(e+"");const o=new c.default(t+"");return i=i.div(o).toFixed(),n=parseInt(n),F(i,n,a)},qe=(e,t,n=18)=>I(e,t,n),ae=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.pow(a)},Le=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.eq(a)},re=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.lt(a)},Ke=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.gt(a)},He=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.lte(a)},Ue=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.gte(a)},Ge=e=>new c.default(e+"").isNaN(),F=(e,t,n)=>new c.default(e+"").dp(parseInt(t),n).toFixed();var p={minus:We,plus:ne,times:k,div:I,pow:ae,eq:Le,lt:re,gt:Ke,lte:He,gte:Ue,isNaN:Ge,dp:F,negated:e=>new c.default(e+"").negated().toFixed(),timesFloor:Pe,divFloor:qe,toFixed:Fe,roundUpToTen:V,roundDecimals:Oe,abs:e=>new c.default(e+"").abs().toFixed()};const u=0,l=1,W=(e,t=18)=>{if(!e)return;const i=new N.default().utils.fromWei(e).split("."),o=i[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(i[1])if(t){const f=i[1].substring(0,t).replace(/0+$/,"");return o+`${f?"."+f:""}`}else return o+"."+i[1];else return o},M="0xeA085D9698651e76750F07d0dE0464476187b3ca",se=e=>{const t=w.getConfirmedClaim();if(t){const n=t.closed===1,a=n?t.id+1:t.id,i=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(i!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[l]!==M)throw new Error(`Invalid address of Server: ${e.addresses[l]} - expected: ${M}`);const o=n?e.amount:p.plus(p.minus(t.cumulativeDebits[l],t.cumulativeDebits[u]),e.amount);ie(o,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[l]!==M)throw new Error(`Invalid address of Server: ${e.addresses[l]} - expected: ${M}`);const n=e.amount;ie(n,e.cumulativeDebits)}return Ye(e),!0},Ye=e=>{if(e.closed===0){const t=`You ${p.gt(e.amount,"0")?"receive":"spend"}: ${W(p.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},ie=(e,t)=>{if(p.gt(e,0)){if(!p.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[u]} - expected: 0`);if(!p.eq(t[l],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[l]} - expected: ${e}`)}else{if(!p.eq(t[u],p.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[u]} - expected: ${-e}`);if(!p.eq(t[l],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[l]} - expected: 0`)}},Je=e=>{let t=se(e);if(t){const n=w.getClaimAlice();n&&(t=O(e,n))}return t},O=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.cumulativeDebits[l]!==e.cumulativeDebits[l])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[l]} - saved claim: ${t.cumulativeDebits[l]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Client: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(t.addresses[l]!==e.addresses[l])throw new Error(`Invalid address of Server: ${e.addresses[l]} - saved claim: ${t.addresses[l]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},je=(e,t)=>{ze(e,t);const n=w.getConfirmedClaim();return n?O(e,n,!0):!1},ze=(e,t)=>{const n=p.plus(t,p.minus(e.cumulativeDebits[l],e.cumulativeDebits[u])),a=`You are withdrawing: ${W(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var B={isValidNewClaim:se,isValidClaimAlice:Je,areEqualClaims:O,isValidWithdraw:je},Xe=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],P=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const oe="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",ce="0x16B052D944c1b7731d7C240b6072530929C93b40",Qe="0x6ce8dA28E2f864420840cF74474eFf5fD80E65B8",v=(e,t=oe,n=Xe)=>{const a=new N.default(e);return new a.eth.Contract(n,t)},q=async(e,t,n)=>await e.methods[t](n).call(),Ze=async(e,t)=>{const n=v(t);return{balance:await q(n,"balanceOf",e)}},et=async(e,t)=>{const n=v(t),a=new N.default(t),i=e.addresses[0];try{const o=await n.methods.withdrawAlice(e).estimateGas({from:i}),K={gasPrice:await a.eth.getGasPrice(),from:i,gas:o};try{await n.methods.withdrawAlice(e).send(K).on("transactionHash",T=>{console.log("txHash",T),d(r.withdrawHash,T)}).on("receipt",T=>{console.log("receipt",T),d(r.withdrawReceipt,T)})}catch(T){throw new Error(T)}}catch(o){throw new Error(o)}},tt=async(e,t)=>{const n=v(t,ce,P);return await q(n,"balanceOf",e)},nt=async(e,t)=>{const n=v(t,Qe,P);return await q(n,"balanceOf",e)},at=async(e,t)=>await new N.default(t).eth.getBalance(e),le=async(e,t,n,a,i,o)=>{const f=new N.default(o),K=await t.methods[n](...a).estimateGas({from:e}),Ct={gasPrice:await f.eth.getGasPrice(),from:e,gas:K};await t.methods[n](...a).send(Ct).on("transactionHash",H=>{d(i,{txHash:H})}).on("receipt",H=>{d(i,{receipt:H})})};var b={getVaultBalance:Ze,withdrawConsensually:et,getDegaBalance:tt,depositDega:async(e,t,n)=>{const a=v(n);await le(t,a,"deposit",[e],r.depositDega,n)},approveDega:async(e,t,n)=>{const a=v(n,ce,P);await le(t,a,"approve",[oe,e],r.approveDega,n)},getBtcbBalance:nt,getBnbBalance:at};const rt=async(e,t)=>{B.isValidNewClaim(e);{if(!R(e))throw new Error("Server's signature is not verified");if(await pe(e,t)===!0)return await L(e),w.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},ue=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:Q,primaryType:"Claim",message:{id:e.id,alice:e.addresses[u],bob:e.addresses[l],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[u],cumulativeDebitBob:e.cumulativeDebits[l],closed:e.closed}}),R=(e,t=!1)=>{let n=1;t&&(n=0);const a=ue(e),i=e.signatures[n];try{return h.recoverTypedSignature({data:a,signature:i,version:h.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},st=async(e,t)=>{const n=de(e);if(B.isValidNewClaim(e),n){if(await pe(e,t)===!0)return await L(e),w.saveClaimAlice(e),e;throw new Error("Not enough balance")}},de=e=>{const t=w.getClaimAlice();if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},pe=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:it(e,n,t)},it=async(e,t,n)=>{try{const{balance:a}=await b.getVaultBalance(e.addresses[t],n);return!!p.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},L=async e=>{const t=ue(e),n=e.addresses[u];e.signatures[u]=await X(t,n)};var C={cashin:st,claimControfirmed:async e=>{if(B.isValidClaimAlice(e))if(R(e))w.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},cashout:rt,signWithdraw:async(e,t)=>{const n=de(e);let a;try{a=(await b.getVaultBalance(e.addresses[u],t)).balance}catch{throw new Error("Can't get balance from Vault")}if(B.isValidWithdraw(e,a)&&n)return await L(e),w.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},lastClaim:e=>{const t=w.getConfirmedClaim();if(!t&&e===null)return!0;if(!t&&e&&e.nonce)return w.saveConfirmedClaim(e),!0;if(t&&e===null)return t;if(e.id>=t.id&&e.nonce>t.nonce)return R(e,!0)&&R(e)?(w.saveConfirmedClaim(e),!0):t;try{return B.areEqualClaims(e,t)===!0&&e.signatures[u]===t.signatures[u]&&e.signatures[l]===t.signatures[l]?!0:t}catch{return t}},downloadLastClaim:w.downloadLastClaim,getConfirmedClaim:w.getConfirmedClaim};const ot=async e=>{try{await y()}catch(n){throw s(r.claimNotSigned,n),n}const t=m();try{const n=await C.cashin(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},ct=async e=>{const t=m();try{return await b.getVaultBalance(e,t)}catch(n){console.error(n)}},lt=async e=>{try{await y()}catch(t){throw s(r.claimNotConfirmed,t),t}try{await C.claimControfirmed(e),d(r.claimConfirmed,{claim:e})}catch(t){throw s(r.claimNotConfirmed,{error:t,claim:e}),t}},ut=async e=>{try{await y()}catch(n){throw s(r.winNotConfirmed,n),n}const t=m();try{const n=await C.cashout(e,t);return d(r.winClaimSigned,{claim:n}),n}catch(n){throw s(r.winNotConfirmed,n),n}},dt=e=>{if(e&&e.hasOwnProperty("error")){s(r.claimNotSynced,e.error);return}const t=C.lastClaim(e);if(t===!0)d(r.claimSynced,"Claims are synced");else return s(r.claimNotSynced,{lastClaim:t}),t},pt=async e=>{try{await y()}catch(n){throw s(r.claimNotSigned,n),n}const t=m();try{const n=await C.signWithdraw(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},yt=async e=>{try{await y()}catch(n){throw s(r.withdraw,n),n}const t=m();try{await b.withdrawConsensually(e,t),d(r.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){s(r.withdraw,n)}},mt=async e=>{try{await y()}catch(i){throw s(r.getBalance,i),i}const t=m();let n="0";try{n=p.plus(n,(await b.getVaultBalance(e,t)).balance)}catch(i){s(r.getBalance,i)}const a=C.getConfirmedClaim();return a&&(n=p.plus(n,p.minus(a.cumulativeDebits[l],a.cumulativeDebits[u]))),n};var g={cashin:ot,claimControfirmed:lt,cashout:ut,lastClaim:dt,signWithdraw:pt,withdrawConsensually:yt,getVaultBalance:ct,downloadLastClaim:C.downloadLastClaim,getTotalBalance:mt};const wt=async(e,t)=>{try{y()}catch(a){throw s(r.depositDega,a),a}const n=m();try{await gt(e,t,n)}catch(a){throw s(r.depositDega,a),a}try{await b.depositDega(e,t,n)}catch(a){throw s(r.depositDega,a),a}},gt=async(e,t,n)=>{let a;try{a=await b.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(p.lt(a,e))throw new Error("The balance of Dega is not enough")};var A={depositDega:wt,approveDega:async(e,t)=>{try{y()}catch(a){throw s(r.approveDega,a),a}const n=m();try{await b.approveDega(e,t,n)}catch(a){throw s(r.approveDega,a),a}},getDegaBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getDegaBalance(e,t)}catch{throw new Error("Can't get balance of Dega")}return n},getBtcbBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getBtcbBalance(e,t)}catch{throw new Error("Can't get balance of BTCB")}return n},getBnbBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getBnbBalance(e,t)}catch{throw new Error("Can't get balance of BNB")}return n}};const bt="CASHIN",ht="CASHOUT",ft="WITHDRAW",Tt="HANDSHAKE";return{getAddress:Be,isMetamaskInstalled:z,isRightNet:J,setRightNet:De,addEventListener:me,addEventListenerWS:we,emitEventWS:ge,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:i}=JSON.parse(e);switch(i&&s(r.general,i),t){case Tt:{const o=g.lastClaim(n);if(o)return{action:t,claim:o,context:a};break}case bt:{if(!n.signatures[u]&&!n.signatures[l]){const o=await g.cashin(n);return{action:t,claim:o,context:a}}else if(n.signatures[u]&&n.signatures[l])await g.claimControfirmed(n);else throw new Error("Invalid claim");break}case ht:if(!n.signatures[u]&&n.signatures[l]){const o=await g.cashout(n);return{action:t,claim:o,context:a}}else throw new Error("Invalid claim");case ft:{if(!n.signatures[u]&&!n.signatures[l]){const o=await g.signWithdraw(n);return{action:t,claim:o,context:a}}else if(n.signatures[u]&&n.signatures[l])await g.claimControfirmed(n),await g.withdrawConsensually(n);else throw new Error("Invalid claim");break}}}},signChallenge:S.signChallenge,setToken:S.setToken,getToken:S.getToken,isLogged:S.isLogged,getVaultBalance:g.getVaultBalance,getTotalBalance:g.getTotalBalance,downloadLastClaim:g.downloadLastClaim,formatNumber:W,pay:g.cashin,payReceived:g.claimControfirmed,win:g.cashout,depositDega:A.depositDega,approveDega:A.approveDega,getDegaBalance:A.getDegaBalance,getBtcbBalance:A.getBtcbBalance,getBnbBalance:A.getBnbBalance}});
