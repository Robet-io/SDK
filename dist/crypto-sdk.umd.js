(function(w,T){typeof exports=="object"&&typeof module!="undefined"?module.exports=T(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],T):(w=typeof globalThis!="undefined"?globalThis:w||self,w.cryptoSDK=T(w["@metamask/eth-sig-util"],w.bignumber.js,w.Web3))})(this,function(w,T,re){"use strict";function F(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var s=F(T),B=F(re);const se=e=>{document.addEventListener(_,e)},d=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t}});document.dispatchEvent(n)},o=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash"},_="cryptoSDK",R="97",ie="BSC Testnet",oe="https://data-seed-prebsc-1-s1.binance.org",ce="https://testnet.bscscan.com/",le="BNB",ue="BNB",de="18",g=async()=>{const e=q(),t=h();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+$(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${$(e)}`;throw new Error(a)}else return!0}},$=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),$(R));else return t},q=()=>[Number(R)],O=async()=>{try{const e=await g();return d(r.network,e),e}catch(e){return o(r.network,e),!1}},me=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(R).toString(16)}`,chainName:ie,nativeCurrency:{name:le,symbol:ue,decimals:de},rpcUrls:[oe],blockExplorerUrls:[ce]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await g()?d(r.network,"Success, network is set to the right one"):o(r.network,"Add net error: network is not changed")}catch(a){o(r.network,`Add net error: ${a}`)}}else throw window.web3?(o(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(o(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},h=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw o(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},P=async e=>{try{await O()?d(r.chainChanged,{chainId:e}):o(r.chainChanged,{chainId:e})}catch{o(r.chainChanged,{chainId:e})}},pe=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await P(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),o(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await P(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),o(r.error,e)}))},ye=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},L=()=>!!(window.ethereum||window.web3),we=async()=>{if(!L()){const t="Metamask is not installed, unable to get user address";throw o(r.metamaskNotInstalled,t),new Error(t)}const e=q();try{await g(e)}catch(t){throw o(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await ye()}}catch(t){throw o(r.address,t),new Error(t)}},K=async(e,t)=>(await g(),await h().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));pe();const H={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},ge=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:H,primaryType:"Signin",message:{method:"signin",text:e}}),he=async(e,t)=>{const n=ge(e);try{const a=await K(n,t);return d(r.challengeSigned,{signature:a}),a}catch(a){throw o(r.challengeNotSigned,a),a}},U="authToken",Y="expireToken",fe=12e5,be=e=>{try{localStorage.setItem(U,e),localStorage.setItem(Y,Date.now()+fe),d(r.token,"JWT token received")}catch(t){o(r.token,t)}},G=()=>localStorage.getItem(U);var E={signChallenge:he,setToken:be,getToken:G,isLogged:()=>{if(G()){const t=localStorage.getItem(Y);if(t&&t>Date.now())return!0}return!1}};const v={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},Ce=e=>{localStorage.setItem(v.claimConfirmed,JSON.stringify(e))},Te=()=>JSON.parse(localStorage.getItem(v.claimConfirmed)),ve=e=>{localStorage.setItem(v.claimAlice,JSON.stringify(e))},Ne=()=>JSON.parse(localStorage.getItem(v.claimAlice)),Ee=()=>{const e=localStorage.getItem(v.claimConfirmed);if(!e)return;const t=Ae(e),n=document.createElement("a"),a=`lastConfirmedClaim-${new Date().toISOString()}.json`;n.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",a),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},Ae=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var p={saveConfirmedClaim:Ce,getConfirmedClaim:Te,saveClaimAlice:ve,getClaimAlice:Ne,downloadLastClaim:Ee};const Se=(e,t=2)=>new s.default(e+"").toFixed(t),ke=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.minus(a).toFixed()},J=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.plus(a).toFixed()},De=(e,t=2)=>new s.default(e+"").toFixed(t),M=e=>{if(e==="0"||e===0)return"10";if(z(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=j(10,n);console.log({p:a});const l=A(e,a);console.log({b:l});const i=M(l);console.log({c:i});const C=S(i,a);return console.log({d:C}),C}else{const t=A(S(e,10,0,s.default.ROUND_UP),10);return t===e+""?M(J(e,1)):t}},A=(e,t,n=18,a=s.default.ROUND_FLOOR)=>{let l=new s.default(e+"");const i=new s.default(t+"");return l=l.times(i).toFixed(),n=parseInt(n),x(l,n,a)},Ie=(e,t,n=18)=>A(e,t,n),S=(e,t,n=18,a=s.default.ROUND_FLOOR)=>{let l=new s.default(e+"");const i=new s.default(t+"");return l=l.div(i).toFixed(),n=parseInt(n),x(l,n,a)},Be=(e,t,n=18)=>S(e,t,n),j=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.pow(a)},_e=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.eq(a)},z=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.lt(a)},Re=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.gt(a)},$e=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.lte(a)},Me=(e,t)=>{const n=new s.default(e+""),a=new s.default(t+"");return n.gte(a)},xe=e=>new s.default(e+"").isNaN(),x=(e,t,n)=>new s.default(e+"").dp(parseInt(t),n).toFixed();var m={minus:ke,plus:J,times:A,div:S,pow:j,eq:_e,lt:z,gt:Re,lte:$e,gte:Me,isNaN:xe,dp:x,negated:e=>new s.default(e+"").negated().toFixed(),timesFloor:Ie,divFloor:Be,toFixed:Se,roundUpToTen:M,roundDecimals:De,abs:e=>new s.default(e+"").abs().toFixed()};const u=0,c=1,X=(e,t=18)=>{if(!e)return;const l=new B.default().utils.fromWei(e).split("."),i=l[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(l[1])if(t){const C=l[1].substring(0,t).replace(/0+$/,"");return i+`${C?"."+C:""}`}else return i+"."+l[1];else return i},k="0xeA085D9698651e76750F07d0dE0464476187b3ca",Q=e=>{const t=p.getConfirmedClaim();if(t){const n=t.closed===1,a=n?t.id+1:t.id,l=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(l!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[c]!==k)throw new Error(`Invalid address of Server: ${e.addresses[c]} - expected: ${k}`);const i=n?e.amount:m.plus(m.minus(t.cumulativeDebits[c],t.cumulativeDebits[u]),e.amount);Z(i,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[c]!==k)throw new Error(`Invalid address of Server: ${e.addresses[c]} - expected: ${k}`);const n=e.amount;Z(n,e.cumulativeDebits)}return Ve(e),!0},Ve=e=>{if(e.closed===0){const t=`You ${m.gt(e.amount,"0")?"receive":"spend"}: ${X(m.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},Z=(e,t)=>{if(m.gt(e,0)){if(!m.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[u]} - expected: 0`);if(!m.eq(t[c],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[c]} - expected: ${e}`)}else{if(!m.eq(t[u],m.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[u]} - expected: ${-e}`);if(!m.eq(t[c],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[c]} - expected: 0`)}},We=e=>{let t=Q(e);if(t){const n=p.getClaimAlice();n&&(t=V(e,n))}return t},V=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.cumulativeDebits[c]!==e.cumulativeDebits[c])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[c]} - saved claim: ${t.cumulativeDebits[c]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Client: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(t.addresses[c]!==e.addresses[c])throw new Error(`Invalid address of Server: ${e.addresses[c]} - saved claim: ${t.addresses[c]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},Fe=(e,t)=>{qe(e,t);const n=p.getConfirmedClaim();return n?V(e,n,!0):!1},qe=(e,t)=>{const n=m.plus(t,m.minus(e.cumulativeDebits[c],e.cumulativeDebits[u])),a=`You are withdrawing: ${X(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var N={isValidNewClaim:Q,isValidClaimAlice:We,areEqualClaims:V,isValidWithdraw:Fe},Oe=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}];const Pe="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",ee=(e,t=Pe,n=Oe)=>{const a=new B.default(e);return new a.eth.Contract(n,t)},Le=async(e,t,n)=>await e.methods[t](n).call();var D={getVaultBalance:async(e,t)=>{const n=ee(t);return{balance:await Le(n,"balanceOf",e)}},withdrawConsensually:async(e,t)=>{const n=ee(t),a=new B.default(t),l=e.addresses[0];try{const i=await n.methods.withdrawAlice(e).estimateGas({from:l}),ze={gasPrice:await a.eth.getGasPrice(),from:l,gas:i};try{await n.methods.withdrawAlice(e).send(ze).on("transactionHash",f=>{console.log("txHash",f),d(r.withdrawHash,f)}).on("receipt",f=>{console.log("receipt",f),d(r.withdrawReceipt,f)})}catch(f){throw new Error(f)}}catch(i){throw new Error(i)}}};const Ke=async(e,t)=>{N.isValidNewClaim(e);{if(!I(e))throw new Error("Server's signature is not verified");if(await ae(e,t)===!0)return await W(e),p.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},te=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:H,primaryType:"Claim",message:{id:e.id,alice:e.addresses[u],bob:e.addresses[c],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[u],cumulativeDebitBob:e.cumulativeDebits[c],closed:e.closed}}),I=(e,t=!1)=>{let n=1;t&&(n=0);const a=te(e),l=e.signatures[n];try{return w.recoverTypedSignature({data:a,signature:l,version:w.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},He=async(e,t)=>{const n=ne(e);if(N.isValidNewClaim(e),n){if(await ae(e,t)===!0)return await W(e),p.saveClaimAlice(e),e;throw new Error("Not enough balance")}},ne=e=>{const t=p.getClaimAlice();if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},ae=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:await Ue(e,n,t)},Ue=async(e,t,n)=>{try{const{balance:a}=await D.getVaultBalance(e.addresses[t],n);return!!m.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},W=async e=>{const t=te(e),n=e.addresses[u];e.signatures[u]=await K(t,n)};var b={cashin:He,claimControfirmed:async e=>{if(N.isValidClaimAlice(e))if(I(e))p.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},cashout:Ke,signWithdraw:async(e,t)=>{const n=ne(e);let a;try{a=(await D.getVaultBalance(e.addresses[u],t)).balance}catch{throw new Error("Can't get balance from Vault")}if(N.isValidWithdraw(e,a)&&n)return await W(e),p.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},lastClaim:e=>{const t=p.getConfirmedClaim();if(!t&&e===null)return!0;if(!t&&e&&e.nonce)return p.saveConfirmedClaim(e),!0;if(t&&e===null)return t;if(e.id>=t.id&&e.nonce>t.nonce)return I(e,!0)&&I(e)?(p.saveConfirmedClaim(e),!0):t;try{return N.areEqualClaims(e,t)===!0&&e.signatures[u]===t.signatures[u]&&e.signatures[c]===t.signatures[c]?!0:t}catch{return t}},downloadLastClaim:p.downloadLastClaim},y={cashin:async e=>{try{await g()}catch(n){throw o(r.claimNotSigned,n),n}const t=h();try{const n=await b.cashin(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw o(r.claimNotSigned,n),n}},claimControfirmed:async e=>{try{await g()}catch(t){throw o(r.claimNotConfirmed,t),t}try{await b.claimControfirmed(e),d(r.claimConfirmed,{claim:e})}catch(t){throw o(r.claimNotConfirmed,{error:t,claim:e}),t}},cashout:async e=>{try{await g()}catch(n){throw o(r.winNotConfirmed,n),n}const t=h();try{const n=await b.cashout(e,t);return d(r.winClaimSigned,{claim:n}),n}catch(n){throw o(r.winNotConfirmed,n),n}},lastClaim:e=>{if(e&&e.hasOwnProperty("error")){o(r.claimNotSynced,e.error);return}const t=b.lastClaim(e);if(t===!0)d(r.claimSynced,"Claims are synced");else return o(r.claimNotSynced,{lastClaim:t}),t},signWithdraw:async e=>{try{await g()}catch(n){throw o(r.claimNotSigned,n),n}const t=h();try{const n=await b.signWithdraw(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw o(r.claimNotSigned,n),n}},withdrawConsensually:async e=>{try{await g()}catch(n){throw o(r.withdraw,n),n}const t=h();try{await D.withdrawConsensually(e,t),d(r.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){o(r.withdraw,n)}},getVaultBalance:async e=>{const t=h();try{return await D.getVaultBalance(e,t)}catch(n){console.error(n)}},downloadLastClaim:b.downloadLastClaim};const Ye="CASHIN",Ge="CASHOUT",Je="WITHDRAW",je="HANDSHAKE";return{getAddress:we,isMetamaskInstalled:L,isRightNet:O,setRightNet:me,addEventListener:se,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:l}=JSON.parse(e);if(l)throw new Error(l);switch(t){case je:{const i=y.lastClaim(n);if(i)return{action:t,claim:i,context:a};break}case Ye:{if(!n.signatures[u]&&!n.signatures[c]){const i=await y.cashin(n);return{action:t,claim:i,context:a}}else if(n.signatures[u]&&n.signatures[c])await y.claimControfirmed(n);else throw new Error("Invalid claim");break}case Ge:if(!n.signatures[u]&&n.signatures[c]){const i=await y.cashout(n);return{action:t,claim:i,context:a}}else throw new Error("Invalid claim");case Je:{if(!n.signatures[u]&&!n.signatures[c]){const i=await y.signWithdraw(n);return{action:t,claim:i,context:a}}else if(n.signatures[u]&&n.signatures[c])await y.claimControfirmed(n),await y.withdrawConsensually(n);else throw new Error("Invalid claim");break}default:throw new Error("Not supported")}}},signChallenge:E.signChallenge,setToken:E.setToken,getToken:E.getToken,isLogged:E.isLogged,getVaultBalance:y.getVaultBalance,downloadLastClaim:y.downloadLastClaim,pay:y.cashin,payReceived:y.claimControfirmed,win:y.cashout}});
