(function(c,u){typeof exports=="object"&&typeof module!="undefined"?module.exports=u(require("@metamask/eth-sig-util"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","web3"],u):(c=typeof globalThis!="undefined"?globalThis:c||self,c.cryptoSDK=u(c["@metamask/eth-sig-util"],c.Web3))})(this,function(c,u){"use strict";function O(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var k=O(u);const P=e=>{document.addEventListener(v,e)},i=(e,t)=>{const n=new CustomEvent(v,{detail:{type:e,msg:t}});document.dispatchEvent(n)},s=(e,t)=>{const n=new CustomEvent(v,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",paymentConfirmed:"paymentConfirmed",paymentNotConfirmed:"paymentNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken"},v="cryptoSDK",S="97",L="BSC Testnet",q="https://data-seed-prebsc-1-s1.binance.org",H="https://testnet.bscscan.com/",U="BNB",J="BNB",W="18",l=async()=>{const e=E(),t=m();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+b(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${b(e)}`;throw new Error(a)}else return!0}},b=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),b(S));else return t},E=()=>[Number(S)],N=async()=>{try{const e=await l();return i(r.network,e),e}catch(e){return s(r.network,e),!1}},F=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(S).toString(16)}`,chainName:L,nativeCurrency:{name:U,symbol:J,decimals:W},rpcUrls:[q],blockExplorerUrls:[H]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await l()?i(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},m=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},I=async e=>{try{await N()?i(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},G=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),i(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await I(e)}),window.ethereum.on("message",async e=>{i(r.message,{message:e})}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),i(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await I(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},Y=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},A=()=>!!(window.ethereum||window.web3),j=async()=>{if(!A()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=E();try{await l(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await Y()}}catch(t){throw s(r.address,t),new Error(t)}},X=async(e,t)=>(await l(),await m().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));G();const D={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0xA0Af3739fBC126C287D2fd0b5372d939Baa36B17"},z=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:D,primaryType:"Signin",message:{method:"signin",text:e}}),Q=async(e,t)=>{const n=z(e);try{const a=await X(n,t);return i(r.challengeSigned,{signature:a}),a}catch(a){throw s(r.challengeNotSigned,a),a}},_="authToken",$="expireToken",Z=12e5,ee=e=>{try{localStorage.setItem(_,e),localStorage.setItem($,Date.now()+Z),i(r.token,"JWT token received")}catch(t){s(r.token,t)}},T=()=>localStorage.getItem(_);var w={signChallenge:Q,setToken:ee,getToken:T,isLogged:()=>{if(T()){const t=localStorage.getItem($);if(t&&t>Date.now())return!0}return!1}};const h={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"};var o={saveConfirmedClaim:e=>{localStorage.setItem(h.claimConfirmed,JSON.stringify(e))},getConfirmedClaim:()=>JSON.parse(localStorage.getItem(h.claimConfirmed)),saveClaimAlice:e=>{localStorage.setItem(h.claimAlice,JSON.stringify(e))},getClaimAlice:()=>JSON.parse(localStorage.getItem(h.claimAlice))};const g="0xeA085D9698651e76750F07d0dE0464476187b3ca",R=async e=>{const t=await o.getConfirmedClaim();if(t){if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}`);if(t.nonce+1!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - last claim nonce: ${t.nonce}`);if(e.addresses[1]!==g)throw new Error(`Invalid address of Server: ${e.addresses[1]} - expected: ${g}`);const a=t.cumulativeDebits[1]-t.cumulativeDebits[0]+e.amount;M(a,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[1]!==g)throw new Error(`Invalid address of Server: ${e.addresses[1]} - expected: ${g}`);const n=e.amount;M(n,e.cumulativeDebits)}return!0},M=(e,t)=>{if(e>0){if(t[0]!==0)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: 0`);if(t[1]!==e)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: ${e}`)}else{if(t[0]!==-e)throw new Error(`Invalid claim cumulative debit of Client: ${t[0]} - expected: ${-e}`);if(t[1]!==0)throw new Error(`Invalid claim cumulative debit of Server: ${t[1]} - expected: 0`)}},te=async e=>{let t=await R(e);if(t){const n=await o.getClaimAlice();n&&(t=B(e,n))}return t},B=(e,t)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(t.nonce!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[0]!==e.cumulativeDebits[0])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[0]} - saved claim: ${t.cumulativeDebits[0]}`);if(t.cumulativeDebits[1]!==e.cumulativeDebits[1])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[1]} - saved claim: ${t.cumulativeDebits[1]}`);if(t.type!==e.type)throw new Error(`Invalid claim type: ${e.type} - saved claim type: ${t.type}`);if(t.addresses[0]!==e.addresses[0])throw new Error(`Invalid address of Client: ${e.addresses[0]} - saved claim: ${t.addresses[0]}`);if(t.addresses[1]!==e.addresses[1])throw new Error(`Invalid address of Server: ${e.addresses[1]} - saved claim: ${t.addresses[1]}`);if(t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);return!0};var y={isValidNewClaim:R,isValidClaimAlice:te,areEqualClaims:B},ne=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"}];const re="0xA0Af3739fBC126C287D2fd0b5372d939Baa36B17",ae=(e,t=re,n=ne)=>{const a=new k.default(e);return new a.eth.Contract(n,t)},se=async(e,t,n)=>await e.methods[t](n).call();var ie={getVaultBalance:async(e,t)=>{const n=ae(t);return{balance:new k.default().utils.fromWei(await se(n,"balanceOf",e))}}};const oe=async(e,t)=>{if(await y.isValidNewClaim(e)){if(!f(e))throw new Error("Server's signature is not verified");if(await x(e,t)===!0)return await K(e,t),o.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},V=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"}]},domain:D,primaryType:"Claim",message:{id:e.id,alice:e.addresses[0],bob:e.addresses[1],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[0],cumulativeDebitBob:e.cumulativeDebits[1]}}),f=(e,t=!1)=>{let n=1;t&&(n=0);const a=V(e),C=e.signatures[n];try{return c.recoverTypedSignature({data:a,signature:C,version:c.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},ce=async(e,t)=>{const n=await de(e);if(await y.isValidNewClaim(e)&&n){if(await x(e,t)===!0)return await K(e,t),o.saveClaimAlice(e),e;throw new Error("Not enough balance")}},de=async e=>{const t=await o.getClaimAlice();if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},x=async(e,t)=>{const n=e.amount<0?0:1;return await le(e,n,t)},le=async(e,t,n)=>{try{const{balance:a}=await ie.getVaultBalance(e.addresses[t],n);return a>=e.cumulativeDebits[t]}catch{throw new Error("Can't get balance from Vault")}},K=async(e,t)=>{const n=V(e),a=e.addresses[0];e.signatures[0]=await t.request({method:"eth_signTypedData_v4",params:[a,JSON.stringify(n)],from:a})};var p={pay:ce,payReceived:async e=>{if(await y.isValidClaimAlice(e))if(f(e))o.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},win:oe,lastClaim:e=>{const t=o.getConfirmedClaim();if(!t&&e===null)return!0;if(!t&&e&&e.nonce)return o.saveConfirmedClaim(e),!0;if(t&&e===null)return{handshake:t};if(e.id>=t.id&&e.nonce>t.nonce)return f(e,!0)&&f(e)?(o.saveConfirmedClaim(e),!0):{handshake:t};try{return y.areEqualClaims(e,t)===!0&&e.signatures[0]===t.signatures[0]&&e.signatures[1]===t.signatures[1]?!0:{handshake:t}}catch{return{handshake:t}}}},d={pay:async e=>{try{await l()}catch(n){throw s(r.claimNotSigned,n),n}const t=m();try{const n=await p.pay(e,t);return i(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},payReceived:async e=>{try{await l()}catch(t){throw s(r.paymentNotConfirmed,t),t}try{await p.payReceived(e),i(r.paymentConfirmed,{claim:e})}catch(t){throw s(r.paymentNotConfirmed,{error:t,claim:e}),t}},win:async e=>{try{await l()}catch(n){throw s(r.winNotConfirmed,n),n}const t=m();try{const n=await p.win(e,t);return i(r.winClaimSigned,{claim:n}),n}catch(n){throw s(r.winNotConfirmed,n),n}},lastClaim:e=>{if(e&&e.hasOwnProperty("error")){s(r.claimNotSynced,e.error);return}const t=p.lastClaim(e);if(t===!0)i(r.claimSynced,"Claims are synced");else return s(r.claimNotSynced,{lastClaim:t}),t}};const ue=async e=>{if(e){const t=JSON.parse(e);if(t.hasOwnProperty("handshake"))return d.lastClaim(t.handshake);{const n=t;if(n&&n.type==="ticket.play"){if(!n.signatures[0]&&!n.signatures[1])return await d.pay(n);n.signatures[0]&&n.signatures[1]&&await d.payReceived(n)}else if(n&&n.type==="ticket.win"&&!n.signatures[0]&&n.signatures[1])return await d.win(n)}}};return{getAddress:j,isMetamaskInstalled:A,isRightNet:N,setRightNet:F,addEventListener:P,pay:d.pay,payReceived:d.payReceived,win:d.win,receiveMsg:ue,signChallenge:w.signChallenge,setToken:w.setToken,getToken:w.getToken,isLogged:w.isLogged,lastClaim:d.lastClaim}});
