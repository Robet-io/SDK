(function(h,N){typeof exports=="object"&&typeof module!="undefined"?module.exports=N(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],N):(h=typeof globalThis!="undefined"?globalThis:h||self,h.cryptoSDK=N(h["@metamask/eth-sig-util"],h.bignumber.js,h.Web3))})(this,function(h,N,ge){"use strict";function U(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var l=U(N),D=U(ge);const be=e=>{document.addEventListener(R,e)},he=e=>{document.addEventListener(G,e)},d=(e,t)=>{const n=new CustomEvent(R,{detail:{type:e,msg:t}});document.dispatchEvent(n)},fe=e=>{const t=new CustomEvent(G,{detail:JSON.parse(e)});document.dispatchEvent(t)},s=(e,t)=>{const n=new CustomEvent(R,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},r={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getBalance:"getBalance"},R="cryptoSDK",G="cryptoSDK_WS",_="97",Te="BSC Testnet",Ce="https://data-seed-prebsc-1-s1.binance.org",ve="https://testnet.bscscan.com/",Ne="BNB",De="BNB",Ee="18",y=async()=>{const e=Y(),t=m();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+$(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${$(e)}`;throw new Error(a)}else return!0}},$=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),$(_));else return t},Y=()=>[Number(_)],J=async()=>{try{const e=await y();return d(r.network,e),e}catch(e){return s(r.network,e),!1}},Be=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(_).toString(16)}`,chainName:Te,nativeCurrency:{name:Ne,symbol:De,decimals:Ee},rpcUrls:[Ce],blockExplorerUrls:[ve]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await y()?d(r.network,"Success, network is set to the right one"):s(r.network,"Add net error: network is not changed")}catch(a){s(r.network,`Add net error: ${a}`)}}else throw window.web3?(s(r.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(s(r.network,"Metamask is not installed"),new Error("Metamask is not installed"))},m=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw s(r.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},j=async e=>{try{await J()?d(r.chainChanged,{chainId:e}):s(r.chainChanged,{chainId:e})}catch{s(r.chainChanged,{chainId:e})}},Ae=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await j(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),s(r.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),d(r.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await j(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),s(r.error,e)}))},Se=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},z=()=>!!(window.ethereum||window.web3),X=async()=>{if(!z()){const t="Metamask is not installed, unable to get user address";throw s(r.metamaskNotInstalled,t),new Error(t)}const e=Y();try{await y(e)}catch(t){throw s(r.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await Se()}}catch(t){throw s(r.address,t),new Error(t)}},Q=async(e,t)=>(await y(),await m().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));Ae();const Z={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},ke=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:Z,primaryType:"Signin",message:{method:"signin",text:e}}),Ie=async(e,t)=>{const n=ke(e);try{const a=await Q(n,t);return d(r.challengeSigned,{signature:a}),a}catch(a){throw s(r.challengeNotSigned,a),a}},Me="authToken",Re="expireToken",_e=12e5,ee=e=>`${Me}_${e.toLowerCase()}`,te=e=>`${Re}_${e.toLowerCase()}`,$e=(e,t)=>{try{localStorage.setItem(ee(e),t),localStorage.setItem(te(e),Date.now()+_e),d(r.token,"JWT token received")}catch(n){s(r.token,n)}},ne=e=>localStorage.getItem(ee(e));var A={signChallenge:Ie,setToken:$e,getToken:ne,isLogged:e=>{if(ne(e)){const n=localStorage.getItem(te(e));if(n&&n>Date.now())return!0}return!1}};const c=0,u=1,ae={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},x=e=>`${ae.claimConfirmed}_${e.toLowerCase()}`,re=e=>`${ae.claimAlice}_${e.toLowerCase()}`,xe=e=>{localStorage.setItem(x(e.addresses[c]),JSON.stringify(e))},Ve=e=>JSON.parse(localStorage.getItem(x(e))),Fe=e=>{localStorage.setItem(re(e.addresses[c]),JSON.stringify(e))},We=e=>JSON.parse(localStorage.getItem(re(e))),Le=e=>{const t=localStorage.getItem(x(e));if(!t)return;const n=Oe(t),a=document.createElement("a"),i=`lastConfirmedClaim-${new Date().toISOString()}.json`;a.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(n)),a.setAttribute("download",i),a.style.display="none",document.body.appendChild(a),a.click(),document.body.removeChild(a)},Oe=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var w={saveConfirmedClaim:xe,getConfirmedClaim:Ve,saveClaimAlice:Fe,getClaimAlice:We,downloadLastClaim:Le};const Pe=(e,t=2)=>new l.default(e+"").toFixed(t),qe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.minus(a).toFixed()},se=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.plus(a).toFixed()},Ke=(e,t=2)=>new l.default(e+"").toFixed(t),V=e=>{if(e==="0"||e===0)return"10";if(oe(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=ie(10,n);console.log({p:a});const i=S(e,a);console.log({b:i});const o=V(i);console.log({c:o});const f=k(o,a);return console.log({d:f}),f}else{const t=S(k(e,10,0,l.default.ROUND_UP),10);return t===e+""?V(se(e,1)):t}},S=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let i=new l.default(e+"");const o=new l.default(t+"");return i=i.times(o).toFixed(),n=parseInt(n),F(i,n,a)},He=(e,t,n=18)=>S(e,t,n),k=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let i=new l.default(e+"");const o=new l.default(t+"");return i=i.div(o).toFixed(),n=parseInt(n),F(i,n,a)},Ue=(e,t,n=18)=>k(e,t,n),ie=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.pow(a)},Ge=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.eq(a)},oe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lt(a)},Ye=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gt(a)},Je=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lte(a)},je=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gte(a)},ze=e=>new l.default(e+"").isNaN(),F=(e,t,n)=>new l.default(e+"").dp(parseInt(t),n).toFixed();var p={minus:qe,plus:se,times:S,div:k,pow:ie,eq:Ge,lt:oe,gt:Ye,lte:Je,gte:je,isNaN:ze,dp:F,negated:e=>new l.default(e+"").negated().toFixed(),timesFloor:He,divFloor:Ue,toFixed:Pe,roundUpToTen:V,roundDecimals:Ke,abs:e=>new l.default(e+"").abs().toFixed()};const W=(e,t=18)=>{if(!e)return;const i=new D.default().utils.fromWei(e).split("."),o=i[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(i[1])if(t){const f=i[1].substring(0,t).replace(/0+$/,"");return o+`${f?"."+f:""}`}else return o+"."+i[1];else return o},I="0xeA085D9698651e76750F07d0dE0464476187b3ca",ce=e=>{const t=w.getConfirmedClaim(e.addresses[c]);if(t){const n=t.closed===1,a=n?t.id+1:t.id,i=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(i!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[u]!==I)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${I}`);const o=n?e.amount:p.plus(p.minus(t.cumulativeDebits[u],t.cumulativeDebits[c]),e.amount);le(o,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[u]!==I)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${I}`);const n=e.amount;le(n,e.cumulativeDebits)}return Xe(e),!0},Xe=e=>{if(e.closed===0){const t=`You ${p.gt(e.amount,"0")?"receive":"spend"}: ${W(p.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},le=(e,t)=>{if(p.gt(e,0)){if(!p.eq(t[c],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: 0`);if(!p.eq(t[u],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: ${e}`)}else{if(!p.eq(t[c],p.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[c]} - expected: ${-e}`);if(!p.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: 0`)}},Qe=e=>{let t=ce(e);if(t){const n=w.getClaimAlice(e.addresses[c]);n&&(t=L(e,n))}return t},L=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[c]!==e.cumulativeDebits[c])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[c]} - saved claim: ${t.cumulativeDebits[c]}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Server: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},Ze=(e,t)=>{et(e,t);const n=w.getConfirmedClaim(e.addresses[c]);return n?L(e,n,!0):!1},et=(e,t)=>{const n=p.plus(t,p.minus(e.cumulativeDebits[u],e.cumulativeDebits[c])),a=`You are withdrawing: ${W(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var E={isValidNewClaim:ce,isValidClaimAlice:Qe,areEqualClaims:L,isValidWithdraw:Ze},tt=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],O=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const ue="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",de="0x16B052D944c1b7731d7C240b6072530929C93b40",nt="0x6ce8dA28E2f864420840cF74474eFf5fD80E65B8",v=(e,t=ue,n=tt)=>{const a=new D.default(e);return new a.eth.Contract(n,t)},P=async(e,t,n)=>await e.methods[t](n).call(),at=async(e,t)=>{const n=v(t);return{balance:await P(n,"balanceOf",e)}},rt=async(e,t)=>{const n=v(t),a=new D.default(t),i=e.addresses[0];try{const o=await n.methods.withdrawAlice(e).estimateGas({from:i}),K={gasPrice:await a.eth.getGasPrice(),from:i,gas:o};try{await n.methods.withdrawAlice(e).send(K).on("transactionHash",T=>{console.log("txHash",T),d(r.withdrawHash,T)}).on("receipt",T=>{console.log("receipt",T),d(r.withdrawReceipt,T)})}catch(T){throw new Error(T)}}catch(o){throw new Error(o)}},st=async(e,t)=>{const n=v(t,de,O);return await P(n,"balanceOf",e)},it=async(e,t)=>{const n=v(t,nt,O);return await P(n,"balanceOf",e)},ot=async(e,t)=>await new D.default(t).eth.getBalance(e),pe=async(e,t,n,a,i,o)=>{const f=new D.default(o),K=await t.methods[n](...a).estimateGas({from:e}),Et={gasPrice:await f.eth.getGasPrice(),from:e,gas:K};await t.methods[n](...a).send(Et).on("transactionHash",H=>{d(i,{txHash:H})}).on("receipt",H=>{d(i,{receipt:H})})};var b={getVaultBalance:at,withdrawConsensually:rt,getDegaBalance:st,depositDega:async(e,t,n)=>{const a=v(n);await pe(t,a,"deposit",[e],r.depositDega,n)},approveDega:async(e,t,n)=>{const a=v(n,de,O);await pe(t,a,"approve",[ue,e],r.approveDega,n)},getBtcbBalance:it,getBnbBalance:ot};const ct=async(e,t)=>{E.isValidNewClaim(e);{if(!M(e))throw new Error("Server's signature is not verified");if(await we(e,t)===!0)return await q(e),w.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},ye=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:Z,primaryType:"Claim",message:{id:e.id,alice:e.addresses[c],bob:e.addresses[u],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[c],cumulativeDebitBob:e.cumulativeDebits[u],closed:e.closed}}),M=(e,t=!1)=>{let n=1;t&&(n=0);const a=ye(e),i=e.signatures[n];try{return h.recoverTypedSignature({data:a,signature:i,version:h.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},lt=async(e,t)=>{const n=me(e);if(E.isValidNewClaim(e),n){if(await we(e,t)===!0)return await q(e),w.saveClaimAlice(e),e;throw new Error("Not enough balance")}},me=e=>{const t=w.getClaimAlice(e.addresses[c]);if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},we=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:ut(e,n,t)},ut=async(e,t,n)=>{try{const{balance:a}=await b.getVaultBalance(e.addresses[t],n);return!!p.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},q=async e=>{const t=ye(e),n=e.addresses[c];e.signatures[c]=await Q(t,n)};var C={cashin:lt,claimControfirmed:async e=>{if(E.isValidClaimAlice(e))if(M(e))w.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},cashout:ct,signWithdraw:async(e,t)=>{const n=me(e);let a;try{a=(await b.getVaultBalance(e.addresses[c],t)).balance}catch{throw new Error("Can't get balance from Vault")}if(E.isValidWithdraw(e,a)&&n)return await q(e),w.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},lastClaim:(e,t)=>{const n=w.getConfirmedClaim(t);if(!n&&e===null)return!0;if(!n&&e&&e.nonce)return w.saveConfirmedClaim(e),!0;if(n&&e===null)return n;if(e.id>=n.id&&e.nonce>n.nonce)return M(e,!0)&&M(e)?(w.saveConfirmedClaim(e),!0):n;try{return E.areEqualClaims(e,n)===!0&&e.signatures[c]===n.signatures[c]&&e.signatures[u]===n.signatures[u]?!0:n}catch{return n}},downloadLastClaim:w.downloadLastClaim,getConfirmedClaim:w.getConfirmedClaim};const dt=async e=>{try{await y()}catch(n){throw s(r.claimNotSigned,n),n}const t=m();try{const n=await C.cashin(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},pt=async e=>{const t=m();try{return await b.getVaultBalance(e,t)}catch(n){console.error(n)}},yt=async e=>{try{await y()}catch(t){throw s(r.claimNotConfirmed,t),t}try{await C.claimControfirmed(e),d(r.claimConfirmed,{claim:e})}catch(t){throw s(r.claimNotConfirmed,{error:t,claim:e}),t}},mt=async e=>{try{await y()}catch(n){throw s(r.winNotConfirmed,n),n}const t=m();try{const n=await C.cashout(e,t);return d(r.winClaimSigned,{claim:n}),n}catch(n){throw s(r.winNotConfirmed,n),n}},wt=async e=>{if(e&&e.hasOwnProperty("error")){s(r.claimNotSynced,e.error);return}const{address:t}=await X();if(e&&e.addresses[c].toLowerCase()!==t.toLowerCase()){s(r.claimNotSynced,e.error);return}const n=C.lastClaim(e,t);if(n===!0)d(r.claimSynced,"Claims are synced");else return s(r.claimNotSynced,{lastClaim:n}),n},gt=async e=>{try{await y()}catch(n){throw s(r.claimNotSigned,n),n}const t=m();try{const n=await C.signWithdraw(e,t);return d(r.claimSigned,{claim:n}),n}catch(n){throw s(r.claimNotSigned,n),n}},bt=async e=>{try{await y()}catch(n){throw s(r.withdraw,n),n}const t=m();try{await b.withdrawConsensually(e,t),d(r.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){s(r.withdraw,n)}},ht=async e=>{try{await y()}catch(i){throw s(r.getBalance,i),i}const t=m();let n="0";try{n=p.plus(n,(await b.getVaultBalance(e,t)).balance)}catch(i){s(r.getBalance,i)}const a=C.getConfirmedClaim(e);return a&&(n=p.plus(n,p.minus(a.cumulativeDebits[u],a.cumulativeDebits[c]))),n};var g={cashin:dt,claimControfirmed:yt,cashout:mt,lastClaim:wt,signWithdraw:gt,withdrawConsensually:bt,getVaultBalance:pt,downloadLastClaim:C.downloadLastClaim,getTotalBalance:ht};const ft=async(e,t)=>{try{y()}catch(a){throw s(r.depositDega,a),a}const n=m();try{await Tt(e,t,n)}catch(a){throw s(r.depositDega,a),a}try{await b.depositDega(e,t,n)}catch(a){throw s(r.depositDega,a),a}},Tt=async(e,t,n)=>{let a;try{a=await b.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(p.lt(a,e))throw new Error("The balance of Dega is not enough")};var B={depositDega:ft,approveDega:async(e,t)=>{try{y()}catch(a){throw s(r.approveDega,a),a}const n=m();try{await b.approveDega(e,t,n)}catch(a){throw s(r.approveDega,a),a}},getDegaBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getDegaBalance(e,t)}catch{throw new Error("Can't get balance of Dega")}return n},getBtcbBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getBtcbBalance(e,t)}catch{throw new Error("Can't get balance of BTCB")}return n},getBnbBalance:async e=>{try{y()}catch(a){throw s(r.getBalance,a),a}const t=m();let n="0";try{n=await b.getBnbBalance(e,t)}catch{throw new Error("Can't get balance of BNB")}return n}};const Ct="CASHIN",vt="CASHOUT",Nt="WITHDRAW",Dt="HANDSHAKE";return{getAddress:X,isMetamaskInstalled:z,isRightNet:J,setRightNet:Be,addEventListener:be,addEventListenerWS:he,emitEventWS:fe,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:i}=JSON.parse(e);switch(i&&s(r.general,i),t){case Dt:{const o=await g.lastClaim(n);if(o)return{action:t,claim:o,context:a};break}case Ct:{if(!n.signatures[c]&&!n.signatures[u]){const o=await g.cashin(n);return{action:t,claim:o,context:a}}else if(n.signatures[c]&&n.signatures[u])await g.claimControfirmed(n);else throw new Error("Invalid claim");break}case vt:if(!n.signatures[c]&&n.signatures[u]){const o=await g.cashout(n);return{action:t,claim:o,context:a}}else throw new Error("Invalid claim");case Nt:{if(!n.signatures[c]&&!n.signatures[u]){const o=await g.signWithdraw(n);return{action:t,claim:o,context:a}}else if(n.signatures[c]&&n.signatures[u])await g.claimControfirmed(n),await g.withdrawConsensually(n);else throw new Error("Invalid claim");break}}}},signChallenge:A.signChallenge,setToken:A.setToken,getToken:A.getToken,isLogged:A.isLogged,getVaultBalance:g.getVaultBalance,getTotalBalance:g.getTotalBalance,downloadLastClaim:g.downloadLastClaim,formatNumber:W,pay:g.cashin,payReceived:g.claimControfirmed,win:g.cashout,depositDega:B.depositDega,approveDega:B.approveDega,getDegaBalance:B.getDegaBalance,getBtcbBalance:B.getBtcbBalance,getBnbBalance:B.getBnbBalance}});
