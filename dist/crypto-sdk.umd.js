(function(f,N){typeof exports=="object"&&typeof module!="undefined"?module.exports=N(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],N):(f=typeof globalThis!="undefined"?globalThis:f||self,f.cryptoSDK=N(f["@metamask/eth-sig-util"],f.bignumber.js,f.Web3))})(this,function(f,N,be){"use strict";function G(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var l=G(N),D=G(be);const he=e=>{document.addEventListener(_,e)},fe=e=>{document.addEventListener(Y,e)},p=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t}});document.dispatchEvent(n)},Te=e=>{const t=new CustomEvent(Y,{detail:JSON.parse(e)});document.dispatchEvent(t)},i=(e,t)=>{const n=new CustomEvent(_,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},s={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getBalance:"getBalance"},_="cryptoSDK",Y="cryptoSDK_WS",$="97",Ce="BSC Testnet",ve="https://data-seed-prebsc-1-s1.binance.org",Ne="https://testnet.bscscan.com/",De="BNB",Ee="BNB",Be="18",y=async()=>{const e=J(),t=m();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+x(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${x(e)}`;throw new Error(a)}else return!0}},x=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),x($));else return t},J=()=>[Number($)],j=async()=>{try{const e=await y();return p(s.network,e),e}catch(e){return i(s.network,e),!1}},Ae=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number($).toString(16)}`,chainName:Ce,nativeCurrency:{name:De,symbol:Ee,decimals:Be},rpcUrls:[ve],blockExplorerUrls:[Ne]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await y()?p(s.network,"Success, network is set to the right one"):i(s.network,"Add net error: network is not changed")}catch(a){i(s.network,`Add net error: ${a}`)}}else throw window.web3?(i(s.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(i(s.network,"Metamask is not installed"),new Error("Metamask is not installed"))},m=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw i(s.metamaskNotInstalled,{error:"Metamask is not installed"}),new Error("Metamask is not installed")},z=async e=>{try{await j()?p(s.chainChanged,{chainId:e}):i(s.chainChanged,{chainId:e})}catch{i(s.chainChanged,{chainId:e})}},Se=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),p(s.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await z(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),i(s.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),p(s.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await z(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),i(s.error,e)}))},ke=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},X=()=>!!(window.ethereum||window.web3),Q=async()=>{if(!X()){const t="Metamask is not installed, unable to get user address";throw i(s.metamaskNotInstalled,t),new Error(t)}const e=J();try{await y(e)}catch(t){throw i(s.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await ke()}}catch(t){throw i(s.address,t),new Error(t)}},Z=async(e,t)=>(await y(),await m().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));Se();const ee={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},Ie=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:ee,primaryType:"Signin",message:{method:"signin",text:e}}),Me=async(e,t)=>{const n=Ie(e);try{const a=await Z(n,t);return p(s.challengeSigned,{signature:a}),a}catch(a){throw i(s.challengeNotSigned,a),a}},Re="authToken",_e="expireToken",$e=12e5,te=e=>`${Re}_${e.toLowerCase()}`,ne=e=>`${_e}_${e.toLowerCase()}`,xe=(e,t)=>{try{localStorage.setItem(te(e),t),localStorage.setItem(ne(e),Date.now()+$e),p(s.token,"JWT token received")}catch(n){i(s.token,n)}},ae=e=>localStorage.getItem(te(e));var S={signChallenge:Me,setToken:xe,getToken:ae,isLogged:e=>{if(ae(e)){const n=localStorage.getItem(ne(e));if(n&&n>Date.now())return!0}return!1}};const o=0,u=1,se={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},V=e=>`${se.claimConfirmed}_${e.toLowerCase()}`,re=e=>`${se.claimAlice}_${e.toLowerCase()}`,Ve=e=>{localStorage.setItem(V(e.addresses[o]),JSON.stringify(e))},We=e=>JSON.parse(localStorage.getItem(V(e))),Fe=e=>{localStorage.setItem(re(e.addresses[o]),JSON.stringify(e))},Le=e=>JSON.parse(localStorage.getItem(re(e))),qe=e=>{const t=localStorage.getItem(V(e));if(!t)return;const n=Oe(t),a=document.createElement("a"),r=`lastConfirmedClaim-${new Date().toISOString()}.json`;a.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(n)),a.setAttribute("download",r),a.style.display="none",document.body.appendChild(a),a.click(),document.body.removeChild(a)},Oe=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var w={saveConfirmedClaim:Ve,getConfirmedClaim:We,saveClaimAlice:Fe,getClaimAlice:Le,downloadLastClaim:qe};const Pe=(e,t=2)=>new l.default(e+"").toFixed(t),Ke=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.minus(a).toFixed()},ie=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.plus(a).toFixed()},He=(e,t=2)=>new l.default(e+"").toFixed(t),W=e=>{if(e==="0"||e===0)return"10";if(ce(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=oe(10,n);console.log({p:a});const r=k(e,a);console.log({b:r});const c=W(r);console.log({c});const h=I(c,a);return console.log({d:h}),h}else{const t=k(I(e,10,0,l.default.ROUND_UP),10);return t===e+""?W(ie(e,1)):t}},k=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const c=new l.default(t+"");return r=r.times(c).toFixed(),n=parseInt(n),F(r,n,a)},Ue=(e,t,n=18)=>k(e,t,n),I=(e,t,n=18,a=l.default.ROUND_FLOOR)=>{let r=new l.default(e+"");const c=new l.default(t+"");return r=r.div(c).toFixed(),n=parseInt(n),F(r,n,a)},Ge=(e,t,n=18)=>I(e,t,n),oe=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.pow(a)},Ye=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.eq(a)},ce=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lt(a)},Je=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gt(a)},je=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.lte(a)},ze=(e,t)=>{const n=new l.default(e+""),a=new l.default(t+"");return n.gte(a)},Xe=e=>new l.default(e+"").isNaN(),F=(e,t,n)=>new l.default(e+"").dp(parseInt(t),n).toFixed();var d={minus:Ke,plus:ie,times:k,div:I,pow:oe,eq:Ye,lt:ce,gt:Je,lte:je,gte:ze,isNaN:Xe,dp:F,negated:e=>new l.default(e+"").negated().toFixed(),timesFloor:Ue,divFloor:Ge,toFixed:Pe,roundUpToTen:W,roundDecimals:He,abs:e=>new l.default(e+"").abs().toFixed()};const L=(e,t=18)=>{if(!e)return;const r=new D.default().utils.fromWei(e).split("."),c=r[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(r[1])if(t){const h=r[1].substring(0,t).replace(/0+$/,"");return c+`${h?"."+h:""}`}else return c+"."+r[1];else return c},M="0xeA085D9698651e76750F07d0dE0464476187b3ca",le=e=>{const t=w.getConfirmedClaim(e.addresses[o]);if(t){const n=t.closed===1,a=n?t.id+1:t.id,r=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(r!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const c=n?e.amount:d.plus(d.minus(t.cumulativeDebits[u],t.cumulativeDebits[o]),e.amount);ue(c,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const n=e.amount;ue(n,e.cumulativeDebits)}return Qe(e),!0},Qe=e=>{if(e.closed===0){const t=`You ${d.gt(e.amount,"0")?"receive":"spend"}: ${L(d.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},ue=(e,t)=>{if(d.gt(e,0)){if(!d.eq(t[o],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: 0`);if(!d.eq(t[u],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: ${e}`)}else{if(!d.eq(t[o],d.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: ${-e}`);if(!d.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: 0`)}},Ze=e=>{let t=le(e);if(t){const n=w.getClaimAlice(e.addresses[o]);n&&(t=q(e,n))}return t},q=(e,t,n=!1)=>{if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`);if(t.cumulativeDebits[o]!==e.cumulativeDebits[o])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[o]} - saved claim: ${t.cumulativeDebits[o]}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.addresses[o]!==e.addresses[o])throw new Error(`Invalid address of Client: ${e.addresses[o]} - saved claim: ${t.addresses[o]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Server: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},et=(e,t)=>{tt(e,t);const n=w.getConfirmedClaim(e.addresses[o]);return n?q(e,n,!0):!0},tt=(e,t)=>{const n=d.plus(t,d.minus(e.cumulativeDebits[u],e.cumulativeDebits[o])),a=`You are withdrawing: ${L(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var E={isValidNewClaim:le,isValidClaimAlice:Ze,areEqualClaims:q,isValidWithdraw:et},nt=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],O=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const de="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",pe="0x16B052D944c1b7731d7C240b6072530929C93b40",at="0x6ce8dA28E2f864420840cF74474eFf5fD80E65B8",C=(e,t=de,n=nt)=>{const a=new D.default(e);return new a.eth.Contract(n,t)},B=async(e,t,n)=>await e.methods[t](n).call(),st=async(e,t)=>{const n=C(t);return{balance:await B(n,"balanceOf",e)}},rt=async(e,t)=>{const n=C(t),a=new D.default(t),r=e.addresses[0];try{const c=await n.methods.withdrawAlice(e).estimateGas({from:r}),H={gasPrice:await a.eth.getGasPrice(),from:r,gas:c};try{await n.methods.withdrawAlice(e).send(H).on("transactionHash",T=>{console.log("txHash",T),p(s.withdrawHash,T)}).on("receipt",T=>{console.log("receipt",T),p(s.withdrawReceipt,T)})}catch(T){throw new Error(T)}}catch(c){throw new Error(c)}},it=async(e,t)=>{const n=C(t,pe,O);return await B(n,"balanceOf",e)},ot=async(e,t)=>{const n=C(t,at,O);return await B(n,"balanceOf",e)},ct=async(e,t)=>await new D.default(t).eth.getBalance(e),ye=async(e,t,n,a,r,c)=>{const h=new D.default(c),H=await t.methods[n](...a).estimateGas({from:e}),St={gasPrice:await h.eth.getGasPrice(),from:e,gas:H};await t.methods[n](...a).send(St).on("transactionHash",U=>{p(r,{txHash:U})}).on("receipt",U=>{p(r,{receipt:U})})};var b={getVaultBalance:st,withdrawConsensually:rt,getDegaBalance:it,depositDega:async(e,t,n)=>{const a=C(n);await ye(t,a,"deposit",[e],s.depositDega,n)},approveDega:async(e,t,n)=>{const a=C(n,pe,O);await ye(t,a,"approve",[de,e],s.approveDega,n)},getBtcbBalance:ot,getBnbBalance:ct,getLastClosedChannel:async(e,t)=>{const n=C(t),a=await B(n,"emergencyWithdrawRequests",e);return a.claimTransaction.id.toString()!=="0"?a.claimTransaction.id.toString():(await B(n,"withdrawTransactions",e)).id.toString()}};const lt=async(e,t)=>{E.isValidNewClaim(e);{if(!R(e))throw new Error("Server's signature is not verified");const n=await K(e,t);if(await ge(e,t)===!0&&n)return await P(e),w.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},me=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:ee,primaryType:"Claim",message:{id:e.id,alice:e.addresses[o],bob:e.addresses[u],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[o],cumulativeDebitBob:e.cumulativeDebits[u],closed:e.closed}}),R=(e,t=!1)=>{let n=1;t&&(n=0);const a=me(e),r=e.signatures[n];try{return f.recoverTypedSignature({data:a,signature:r,version:f.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},ut=async(e,t)=>{const n=we(e);E.isValidNewClaim(e);const a=await K(e,t);if(n&&a){if(await ge(e,t)===!0)return await P(e),w.saveClaimAlice(e),e;throw new Error("Not enough balance")}},we=e=>{const t=w.getClaimAlice(e.addresses[o]);if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},ge=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:dt(e,n,t)},dt=async(e,t,n)=>{try{const{balance:a}=await b.getVaultBalance(e.addresses[t],n);return!!d.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},P=async e=>{const t=me(e),n=e.addresses[o];e.signatures[o]=await Z(t,n)},pt=async e=>{if(E.isValidClaimAlice(e))if(R(e))w.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},yt=async(e,t)=>{const n=we(e);let a;try{a=(await b.getVaultBalance(e.addresses[o],t)).balance}catch{throw new Error("Can't get balance from Vault")}const r=E.isValidWithdraw(e,a),c=await K(e,t);if(r&&n&&c)return await P(e),w.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},K=async(e,t)=>{const n=await b.getLastClosedChannel(e.addresses[o],t);if(d.eq(d.plus(n,"1"),e.id))return!0;throw new Error("Invalid channel id")};var v={cashin:ut,claimControfirmed:pt,cashout:lt,signWithdraw:yt,lastClaim:(e,t)=>{const n=w.getConfirmedClaim(t);if(!n&&e===null)return!0;if(!n&&e&&e.nonce)return w.saveConfirmedClaim(e),!0;if(n&&e===null)return n;if(e.id>=n.id&&e.nonce>n.nonce)return R(e,!0)&&R(e)?(w.saveConfirmedClaim(e),!0):n;try{return E.areEqualClaims(e,n)===!0&&e.signatures[o]===n.signatures[o]&&e.signatures[u]===n.signatures[u]?!0:n}catch{return n}},downloadLastClaim:w.downloadLastClaim,getConfirmedClaim:w.getConfirmedClaim};const mt=async e=>{try{await y()}catch(n){throw i(s.claimNotSigned,n),n}const t=m();try{const n=await v.cashin(e,t);return p(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},wt=async e=>{const t=m();try{return await b.getVaultBalance(e,t)}catch(n){console.error(n)}},gt=async e=>{try{await y()}catch(t){throw i(s.claimNotConfirmed,t),t}try{await v.claimControfirmed(e),p(s.claimConfirmed,{claim:e})}catch(t){throw i(s.claimNotConfirmed,{error:t,claim:e}),t}},bt=async e=>{try{await y()}catch(n){throw i(s.winNotConfirmed,n),n}const t=m();try{const n=await v.cashout(e,t);return p(s.winClaimSigned,{claim:n}),n}catch(n){throw i(s.winNotConfirmed,n),n}},ht=async e=>{if(e&&e.hasOwnProperty("error")){i(s.claimNotSynced,e.error);return}const{address:t}=await Q();if(e&&e.addresses[o].toLowerCase()!==t.toLowerCase()){i(s.claimNotSynced,e.error);return}const n=v.lastClaim(e,t);if(n===!0)p(s.claimSynced,"Claims are synced");else return i(s.claimNotSynced,{lastClaim:n}),n},ft=async e=>{try{await y()}catch(n){throw i(s.claimNotSigned,n),n}const t=m();try{const n=await v.signWithdraw(e,t);return p(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},Tt=async e=>{try{await y()}catch(n){throw i(s.withdraw,n),n}const t=m();try{await b.withdrawConsensually(e,t),p(s.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){i(s.withdraw,n)}},Ct=async e=>{try{await y()}catch(r){throw i(s.getBalance,r),r}const t=m();let n="0";try{n=d.plus(n,(await b.getVaultBalance(e,t)).balance)}catch(r){i(s.getBalance,r)}const a=v.getConfirmedClaim(e);return a&&(n=d.plus(n,d.minus(a.cumulativeDebits[u],a.cumulativeDebits[o]))),n};var g={cashin:mt,claimControfirmed:gt,cashout:bt,lastClaim:ht,signWithdraw:ft,withdrawConsensually:Tt,getVaultBalance:wt,downloadLastClaim:v.downloadLastClaim,getTotalBalance:Ct};const vt=async(e,t)=>{try{y()}catch(a){throw i(s.depositDega,a),a}const n=m();try{await Nt(e,t,n)}catch(a){throw i(s.depositDega,a),a}try{await b.depositDega(e,t,n)}catch(a){throw i(s.depositDega,a),a}},Nt=async(e,t,n)=>{let a;try{a=await b.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(d.lt(a,e))throw new Error("The balance of Dega is not enough")};var A={depositDega:vt,approveDega:async(e,t)=>{try{y()}catch(a){throw i(s.approveDega,a),a}const n=m();try{await b.approveDega(e,t,n)}catch(a){throw i(s.approveDega,a),a}},getDegaBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=m();let n="0";try{n=await b.getDegaBalance(e,t)}catch{throw new Error("Can't get balance of Dega")}return n.toString()},getBtcbBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=m();let n="0";try{n=await b.getBtcbBalance(e,t)}catch{throw new Error("Can't get balance of BTCB")}return n.toString()},getBnbBalance:async e=>{try{y()}catch(a){throw i(s.getBalance,a),a}const t=m();let n="0";try{n=await b.getBnbBalance(e,t)}catch{throw new Error("Can't get balance of BNB")}return n.toString()}};const Dt="CASHIN",Et="CASHOUT",Bt="WITHDRAW",At="HANDSHAKE";return{getAddress:Q,isMetamaskInstalled:X,isRightNet:j,setRightNet:Ae,addEventListener:he,addEventListenerWS:fe,emitEventWS:Te,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:r}=JSON.parse(e);switch(r&&i(s.general,r),t){case At:{const c=await g.lastClaim(n);if(c)return{action:t,claim:c,context:a};break}case Dt:{if(!n.signatures[o]&&!n.signatures[u]){const c=await g.cashin(n);return{action:t,claim:c,context:a}}else if(n.signatures[o]&&n.signatures[u])await g.claimControfirmed(n);else throw new Error("Invalid claim");break}case Et:if(!n.signatures[o]&&n.signatures[u]){const c=await g.cashout(n);return{action:t,claim:c,context:a}}else throw new Error("Invalid claim");case Bt:{if(!n.signatures[o]&&!n.signatures[u]){const c=await g.signWithdraw(n);return{action:t,claim:c,context:a}}else if(n.signatures[o]&&n.signatures[u])await g.claimControfirmed(n),await g.withdrawConsensually(n);else throw new Error("Invalid claim");break}}}},signChallenge:S.signChallenge,setToken:S.setToken,getToken:S.getToken,isLogged:S.isLogged,getVaultBalance:g.getVaultBalance,getTotalBalance:g.getTotalBalance,downloadLastClaim:g.downloadLastClaim,formatNumber:L,pay:g.cashin,payReceived:g.claimControfirmed,win:g.cashout,depositDega:A.depositDega,approveDega:A.approveDega,getDegaBalance:A.getDegaBalance,getBtcbBalance:A.getBtcbBalance,getBnbBalance:A.getBnbBalance}});
