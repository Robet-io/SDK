!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).cryptoSDK=r()}(this,(function(){"use strict";var e=function(e,r){var n=new CustomEvent(t,{detail:{type:e,msg:r}});document.dispatchEvent(n)},r=function(e,r){var n=new CustomEvent(t,{detail:{type:e,msg:r,error:!0}});document.dispatchEvent(n)},n={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general"},t="cryptoSDK";function a(e,r,n,t,a,o,s){try{var u=e[o](s),c=u.value}catch(e){return void n(e)}u.done?r(c):Promise.resolve(c).then(t,a)}function o(e){return function(){var r=this,n=arguments;return new Promise((function(t,o){var s=e.apply(r,n);function u(e){a(s,t,o,u,c,"next",e)}function c(e){a(s,t,o,u,c,"throw",e)}u(void 0)}))}}var s=function(){var e=o(regeneratorRuntime.mark((function e(r){var n,t,a,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!1,!window.ethereum){e.next=5;break}n=window.ethereum,e.next=10;break;case 5:if(!window.web3){e.next=9;break}n=window.web3.currentProvider,e.next=10;break;case 9:throw new Error("Metamask is not installed !!!");case 10:if(!n){e.next=31;break}return e.t0=Number,e.next=14,n.request({method:"eth_chainId"});case 14:if(e.t1=e.sent,t=(0,e.t0)(e.t1),!Array.isArray(r)){e.next=25;break}if(r.includes(t)){e.next=22;break}throw a="Please change your network on Metamask. Valid networks are: "+u(r),new Error(a);case 22:case 30:return e.abrupt("return",!0);case 23:e.next=31;break;case 25:if(Number(t)===Number(r)){e.next=30;break}throw o="Please set your network on Metamask to ".concat(u(r)),new Error(o);case 31:case"end":return e.stop()}}),e)})));return function(r){return e.apply(this,arguments)}}(),u=function e(){var r=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=[];if(n[1]="Ethereum Mainnet",n[3]="Ethereum Ropsten",n[42]="Ethereum Kovan",n[4]="Ethereum Rinkeby",n[5]="Ethereum Goerli",n[56]="Binance Smart Chain",n[97]="Binance Smart Chain Testnet",r){if(Array.isArray(r)){for(var t=[],a=0;a<r.length;a++)t.push(n[r[a]]);return t}return n[r]?n[r]:(console.error("Network ID ".concat(r," Not found in the networksNames list")),e(97))}return n},c=function(){return[Number(97)]},i=function(){var t=o(regeneratorRuntime.mark((function t(){var a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,s(c());case 3:return a=t.sent,e(n.network,a),t.abrupt("return",a);case 8:return t.prev=8,t.t0=t.catch(0),r(n.network,t.t0),t.abrupt("return",!1);case 12:case"end":return t.stop()}}),t,null,[[0,8]])})));return function(){return t.apply(this,arguments)}}(),w=function(){var t=o(regeneratorRuntime.mark((function t(){var a,o,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!window.ethereum){t.next=18;break}return a=window.ethereum,o="0x".concat(Number(97).toString(16)),u=[{chainId:o,chainName:"BSC Testnet2",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://data-seed-prebsc-1-s1.binance.org"],blockExplorerUrls:["https://testnet.bscscan.com/"]}],t.prev=4,t.next=7,a.request({method:"wallet_addEthereumChain",params:u});case 7:return t.next=9,s(c());case 9:t.sent?e(n.network,"Success, network is set to the right one"):r(n.network,"Add net error: network is not changed"),t.next=16;break;case 13:t.prev=13,t.t0=t.catch(4),r(n.network,"Add net error: ".concat(t.t0));case 16:t.next=25;break;case 18:if(!window.web3){t.next=23;break}throw r(n.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching");case 23:throw r(n.network,"Metamask is not installed"),new Error("Metamask is not installed");case 25:case"end":return t.stop()}}),t,null,[[4,13]])})));return function(){return t.apply(this,arguments)}}(),d=function(){var t=o(regeneratorRuntime.mark((function t(a){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,i();case 3:t.sent?e(n.chainChanged,{chainId:a}):r(n.chainChanged,{chainId:a}),t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),r(n.chainChanged,{chainId:a});case 10:case"end":return t.stop()}}),t,null,[[0,7]])})));return function(e){return t.apply(this,arguments)}}(),h=function(){var e=o(regeneratorRuntime.mark((function e(){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!window.ethereum){e.next=11;break}return e.next=3,window.ethereum.request({method:"eth_requestAccounts"});case 3:if(!(r=e.sent)||!r[0]){e.next=8;break}return e.abrupt("return",r[0]);case 8:case 17:throw new Error("Can't get address");case 9:case 18:e.next=21;break;case 11:if(!window.web3){e.next=20;break}if(!((n=window.web3.eth.accounts)&&n.length>0)){e.next=17;break}return e.abrupt("return",n[0]);case 20:throw new Error("Metamask is not installed");case 21:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),m=function(){return!(!window.ethereum&&!window.web3)},f=function(){var e=o(regeneratorRuntime.mark((function e(){var t,a,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(m()){e.next=4;break}throw r(n.metamaskNotInstalled,t="Metamask is not installed, unable to get user address"),new Error(t);case 4:return a=c(),e.prev=5,e.next=8,s(a);case 8:e.next=14;break;case 10:throw e.prev=10,e.t0=e.catch(5),r(n.wrongNetworkOnGetAddress,e.t0),new Error(e.t0);case 14:return e.prev=14,e.next=17,h();case 17:return o=e.sent,e.abrupt("return",{address:o});case 21:throw e.prev=21,e.t1=e.catch(14),r(n.address,e.t1),new Error(e.t1);case 25:case"end":return e.stop()}}),e,null,[[5,10],[14,21]])})));return function(){return e.apply(this,arguments)}}();return window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId=97),window.ethereum.on("accountsChanged",function(){var r=o(regeneratorRuntime.mark((function r(t){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:console.log("#### - Metamask: accountsChanged - accounts",t),e(n.accountsChanged,{accounts:t});case 2:case"end":return r.stop()}}),r)})));return function(e){return r.apply(this,arguments)}}()),window.ethereum.on("chainChanged",function(){var e=o(regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("#### - Metamask: chainChanged",r),e.next=3,d(r);case 3:case"end":return e.stop()}}),e)})));return function(r){return e.apply(this,arguments)}}()),window.ethereum.on("message",function(){var r=o(regeneratorRuntime.mark((function r(t){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:e(n.message,{message:t});case 1:case"end":return r.stop()}}),r)})));return function(e){return r.apply(this,arguments)}}()),window.ethereum.on("error",function(){var e=o(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:console.log("#### - Metamask: error",t),r(n.error,t);case 2:case"end":return e.stop()}}),e)})));return function(r){return e.apply(this,arguments)}}())):window.web3&&(window.web3.currentProvider.on("accountsChanged",function(){var r=o(regeneratorRuntime.mark((function r(t){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:console.log("#### - Metamask web3: accountsChanged - accounts",t),e(n.accountsChanged,{accounts:t});case 2:case"end":return r.stop()}}),r)})));return function(e){return r.apply(this,arguments)}}()),window.web3.currentProvider.on("chainIdChanged",function(){var e=o(regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("#### - Metamask web3: chainChanged",r),e.next=3,d(r);case 3:case"end":return e.stop()}}),e)})));return function(r){return e.apply(this,arguments)}}()),window.web3.currentProvider.on("error",function(){var e=o(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:console.log("#### - Metamask web3: error",t),r(n.error,t);case 2:case"end":return e.stop()}}),e)})));return function(r){return e.apply(this,arguments)}}())),{getAddress:f,isMetamaskInstalled:m,isRightNet:i,setRightNet:w,addEventListener:function(e){document.addEventListener(t,e)}}}));
