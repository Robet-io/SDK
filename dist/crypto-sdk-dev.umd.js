var Et=Object.defineProperty;var be=Object.getOwnPropertySymbols;var St=Object.prototype.hasOwnProperty,kt=Object.prototype.propertyIsEnumerable;var fe=(p,m,T)=>m in p?Et(p,m,{enumerable:!0,configurable:!0,writable:!0,value:T}):p[m]=T,Te=(p,m)=>{for(var T in m||(m={}))St.call(m,T)&&fe(p,T,m[T]);if(be)for(var T of be(m))kt.call(m,T)&&fe(p,T,m[T]);return p};(function(p,m){typeof exports=="object"&&typeof module!="undefined"?module.exports=m(require("@metamask/eth-sig-util"),require("bignumber.js"),require("web3")):typeof define=="function"&&define.amd?define(["@metamask/eth-sig-util","bignumber.js","web3"],m):(p=typeof globalThis!="undefined"?globalThis:p||self,p.cryptoSDK=m(p["@metamask/eth-sig-util"],p.bignumber.js,p.Web3))})(this,function(p,m,T){"use strict";function j(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var c=j(m),E=j(T);const Ce=e=>{document.addEventListener(x,e)},ve=e=>{document.addEventListener(z,e)},y=(e,t)=>{const n=new CustomEvent(x,{detail:{type:e,msg:t}});document.dispatchEvent(n)},De=e=>{const t=new CustomEvent(z,{detail:JSON.parse(e)});document.dispatchEvent(t)},i=(e,t)=>{const n=new CustomEvent(x,{detail:{type:e,msg:t,error:!0}});document.dispatchEvent(n)},s={network:"network",accountsChanged:"accountsChanged",chainChanged:"chainChanged",message:"message",address:"address",wrongNetworkOnGetAddress:"wrongNetworkOnGetAddress",metamaskNotInstalled:"metamaskNotInstalled",general:"general",claimNotSigned:"claimNotSigned",claimSigned:"claimSigned",claimConfirmed:"claimConfirmed",claimNotConfirmed:"claimNotConfirmed",winClaimSigned:"winClaimSigned",winNotConfirmed:"winNotConfirmed",challengeSigned:"challengeSigned",challengeNotSigned:"challengeNotSigned",claimSynced:"claimSynced",claimNotSynced:"claimNotSynced",token:"jwtToken",withdraw:"withdraw",withdrawReceipt:"withdrawReceipt",withdrawHash:"withdrawHash",depositDega:"depositDega",withdrawDega:"withdrawDega",approveDega:"approveDega",getBalance:"getBalance",degaAllowed:"degaAllowed"},x="cryptoSDK",z="cryptoSDK_WS",V="97",Ne="BSC Testnet",Ae="https://speedy-nodes-nyc.moralis.io/636129c4a45215232e5b9d81/bsc/testnet",Be="https://testnet.bscscan.com/",Ee="BNB",Se="BNB",ke="18",w=async()=>{const e=X(),t=g();if(t){const n=Number(await t.request({method:"eth_chainId"}));if(Array.isArray(e)){if(e.includes(n))return!0;{const a="Please change your network on Metamask. Valid networks are: "+F(e);throw new Error(a)}}else if(Number(n)!==Number(e)){const a=`Please set your network on Metamask to ${F(e)}`;throw new Error(a)}else return!0}},F=(e=!1)=>{const t=[];if(t[1]="Ethereum Mainnet",t[3]="Ethereum Ropsten",t[42]="Ethereum Kovan",t[4]="Ethereum Rinkeby",t[5]="Ethereum Goerli",t[56]="Binance Smart Chain",t[97]="Binance Smart Chain Testnet",e)if(Array.isArray(e)){const n=[];for(let a=0;a<e.length;a++)n.push(t[e[a]]);return n}else return t[e]?t[e]:(console.error(`Network ID ${e} Not found in the networksNames list`),F(V));else return t},X=()=>[Number(V)],Q=async()=>{try{const e=await w();return y(s.network,e),e}catch(e){return i(s.network,e),!1}},Ie=async()=>{if(window.ethereum){const e=window.ethereum,n=[{chainId:`0x${Number(V).toString(16)}`,chainName:Ne,nativeCurrency:{name:Ee,symbol:Se,decimals:parseInt(ke)},rpcUrls:[Ae],blockExplorerUrls:[Be]}];try{await e.request({method:"wallet_addEthereumChain",params:n}),await w()?y(s.network,"Success, network is set to the right one"):i(s.network,"Add net error: network is not changed")}catch(a){i(s.network,Te({},a))}}else throw window.web3?(i(s.network,"This version of Metamask supports only manual network switching"),new Error("This version of Metamask supports only manual network switching")):(i(s.network,"Metamask is not installed"),new Error("Metamask is not installed"))},g=()=>{if(window.ethereum)return window.ethereum;if(window.web3)return window.web3.currentProvider;throw i(s.metamaskNotInstalled,"Metamask is not installed"),new Error("Metamask is not installed")},Z=async e=>{try{await Q()?y(s.chainChanged,{chainId:e}):i(s.chainChanged,{chainId:e})}catch{i(s.chainChanged,{chainId:e})}},$e=()=>{window.ethereum?(window.ethereum.chainId||(window.ethereum.chainId="97"),window.ethereum.on("accountsChanged",async e=>{console.log("#### - Metamask: accountsChanged - accounts",e),y(s.accountsChanged,{accounts:e})}),window.ethereum.on("chainChanged",async e=>{console.log("#### - Metamask: chainChanged",e),await Z(e)}),window.ethereum.on("error",async e=>{console.log("#### - Metamask: error",e),i(s.error,e)})):window.web3&&(window.web3.currentProvider.on("accountsChanged",async e=>{console.log("#### - Metamask web3: accountsChanged - accounts",e),y(s.accountsChanged,{accounts:e})}),window.web3.currentProvider.on("chainIdChanged",async e=>{console.log("#### - Metamask web3: chainChanged",e),await Z(e)}),window.web3.currentProvider.on("error",async e=>{console.log("#### - Metamask web3: error",e),i(s.error,e)}))},Me=async()=>{if(window.ethereum){const e=await window.ethereum.request({method:"eth_requestAccounts"});if(e&&e[0])return e[0];throw new Error("Can't get address")}else if(window.web3){const e=window.web3.eth.accounts;if(e&&e.length>0)return e[0];throw new Error("Can't get address")}else throw new Error("Metamask is not installed")},ee=()=>!!(window.ethereum||window.web3),te=async()=>{if(!ee()){const t="Metamask is not installed, unable to get user address";throw i(s.metamaskNotInstalled,t),new Error(t)}const e=X();try{await w(e)}catch(t){throw i(s.wrongNetworkOnGetAddress,t),new Error(t)}try{return{address:await Me()}}catch(t){throw i(s.address,t),new Error(t)}},ne=async(e,t)=>(await w(),await g().request({method:"eth_signTypedData_v4",params:[t,JSON.stringify(e)],from:t}));$e();const ae={name:"BSC Testnet",version:"1",chainId:"97",verifyingContract:"0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067"},Re=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Signin:[{name:"method",type:"string"},{name:"text",type:"string"}]},domain:ae,primaryType:"Signin",message:{method:"signin",text:e}}),_e=async(e,t)=>{const n=Re(e);try{const a=await ne(n,t);return y(s.challengeSigned,{signature:a}),a}catch(a){throw i(s.challengeNotSigned,a),a}},xe="authToken",Ve="expireToken",Fe=12e5,se=e=>`${xe}_${e.toLowerCase()}`,re=e=>`${Ve}_${e.toLowerCase()}`,Le=(e,t)=>{try{localStorage.setItem(se(e),t),localStorage.setItem(re(e),Date.now()+Fe),y(s.token,"JWT token received")}catch(n){i(s.token,n)}},ie=e=>localStorage.getItem(se(e));var k={signChallenge:_e,setToken:Le,getToken:ie,isLogged:e=>{if(ie(e)){const n=localStorage.getItem(re(e));if(n&&n>Date.now())return!0}return!1}};const o=0,u=1,oe={claimConfirmed:"claimConfirmed",claimAlice:"claimAlice"},L=e=>`${oe.claimConfirmed}_${e.toLowerCase()}`,ce=e=>`${oe.claimAlice}_${e.toLowerCase()}`,We=e=>{localStorage.setItem(L(e.addresses[o]),JSON.stringify(e))},qe=e=>JSON.parse(localStorage.getItem(L(e))),Oe=e=>{localStorage.setItem(ce(e.addresses[o]),JSON.stringify(e))},Pe=e=>JSON.parse(localStorage.getItem(ce(e))),Ke=e=>{const t=localStorage.getItem(L(e));if(!t)return;const n=He(t),a=document.createElement("a"),r=`lastConfirmedClaim-${new Date().toISOString()}.json`;a.setAttribute("href","data:application/json;charset=utf-8,"+encodeURIComponent(n)),a.setAttribute("download",r),a.style.display="none",document.body.appendChild(a),a.click(),document.body.removeChild(a)},He=e=>(e=e.replace("{",`{
`),e=e.replace("}",`
}`),e=e.replaceAll(",",`,
`),e);var b={saveConfirmedClaim:We,getConfirmedClaim:qe,saveClaimAlice:Oe,getClaimAlice:Pe,downloadLastClaim:Ke};const Ue=(e,t=2)=>new c.default(e+"").toFixed(t),Ge=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.minus(a).toFixed()},le=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.plus(a).toFixed()},Ye=(e,t=2)=>new c.default(e+"").toFixed(t),W=e=>{if(e==="0"||e===0)return"10";if(de(e,1)){const n=e.replace("0.","").length;console.log("l",n);const a=ue(10,n);console.log({p:a});const r=I(e,a);console.log({b:r});const l=W(r);console.log({c:l});const C=$(l,a);return console.log({d:C}),C}else{const t=I($(e,10,0,c.default.ROUND_UP),10);return t===e+""?W(le(e,1)):t}},I=(e,t,n=18,a=c.default.ROUND_FLOOR)=>{let r=new c.default(e+"");const l=new c.default(t+"");return r=r.times(l).toFixed(),n=parseInt(n),q(r,n,a)},Je=(e,t,n=18)=>I(e,t,n),$=(e,t,n=18,a=c.default.ROUND_FLOOR)=>{let r=new c.default(e+"");const l=new c.default(t+"");return r=r.div(l).toFixed(),n=parseInt(n),q(r,n,a)},je=(e,t,n=18)=>$(e,t,n),ue=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.pow(a)},ze=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.eq(a)},de=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.lt(a)},Xe=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.gt(a)},Qe=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.lte(a)},Ze=(e,t)=>{const n=new c.default(e+""),a=new c.default(t+"");return n.gte(a)},et=e=>new c.default(e+"").isNaN(),q=(e,t,n)=>new c.default(e+"").dp(parseInt(t),n).toFixed();var d={minus:Ge,plus:le,times:I,div:$,pow:ue,eq:ze,lt:de,gt:Xe,lte:Qe,gte:Ze,isNaN:et,dp:q,negated:e=>new c.default(e+"").negated().toFixed(),timesFloor:Je,divFloor:je,toFixed:Ue,roundUpToTen:W,roundDecimals:Ye,abs:e=>new c.default(e+"").abs().toFixed()};const O=(e,t=18)=>{if(!e)return;const r=new E.default().utils.fromWei(e).split("."),l=r[0].toString().replace(/\b0+(?!$)/g,"").replace(/\B(?=(\d{3})+(?!\d))/g,",");if(r[1])if(t){const C=r[1].substring(0,t).replace(/0+$/,"");return l+`${C?"."+C:""}`}else return l+"."+r[1];else return l},M="0xeA085D9698651e76750F07d0dE0464476187b3ca",pe=e=>{const t=b.getConfirmedClaim(e.addresses[o]);if(t){const n=t.closed===1,a=n?t.id+1:t.id,r=n?1:t.nonce+1;if(a!==e.id)throw new Error(`Invalid claim id: ${e.id} - last claim id: ${t.id}${n?". id must change after withdraw":""}`);if(r!==e.nonce)throw new Error(`Invalid claim nonce: ${e.nonce} ${n?" - channel id is changed":`- last claim nonce: ${t.nonce}`}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const l=n?e.amount:d.plus(d.minus(t.cumulativeDebits[u],t.cumulativeDebits[o]),e.amount);ye(l,e.cumulativeDebits)}else{if(e.id!==1)throw new Error(`Invalid claim id: ${e.id}`);if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce}`);if(e.addresses[u]!==M)throw new Error(`Invalid address of Server: ${e.addresses[u]} - expected: ${M}`);const n=e.amount;ye(n,e.cumulativeDebits)}return tt(e),!0},tt=e=>{if(e.closed===0){const t=`You ${d.gt(e.amount,"0")?"receive":"spend"}: ${O(d.abs(e.amount))} DE.GA`;if(e.messageForAlice!==t)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t}`)}},ye=(e,t)=>{if(d.gt(e,0)){if(!d.eq(t[o],0))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: 0`);if(!d.eq(t[u],e))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: ${e}`)}else{if(!d.eq(t[o],d.negated(e)))throw new Error(`Invalid claim cumulative debit of Client: ${t[o]} - expected: ${-e}`);if(!d.eq(t[u],0))throw new Error(`Invalid claim cumulative debit of Server: ${t[u]} - expected: 0`)}},nt=e=>{let t=pe(e);if(t){const n=b.getClaimAlice(e.addresses[o]);n&&(t=P(e,n))}return t},P=(e,t,n=!1)=>{if(n&&t.closed===1){if(t.id+1!==e.id)throw new Error(`Invalid claim id: ${e.id} - channel was closed and saved claim id: ${t.id}`)}else if(t.id!==e.id)throw new Error(`Invalid claim id: ${e.id} - saved claim id: ${t.id}`);if(n&&t.closed===1){if(e.nonce!==1)throw new Error(`Invalid claim nonce: ${e.nonce} - channel was closed`)}else{const a=n?e.nonce-1:e.nonce;if(t.nonce!==a)throw new Error(`Invalid claim nonce: ${e.nonce} - saved claim nonce: ${t.nonce}`)}if(t.cumulativeDebits[o]!==e.cumulativeDebits[o])throw new Error(`Invalid claim cumulative debit of Client: ${e.cumulativeDebits[o]} - saved claim: ${t.cumulativeDebits[o]}`);if(t.cumulativeDebits[u]!==e.cumulativeDebits[u])throw new Error(`Invalid claim cumulative debit of Server: ${e.cumulativeDebits[u]} - saved claim: ${t.cumulativeDebits[u]}`);if(t.addresses[o]!==e.addresses[o])throw new Error(`Invalid address of Client: ${e.addresses[o]} - saved claim: ${t.addresses[o]}`);if(t.addresses[u]!==e.addresses[u])throw new Error(`Invalid address of Server: ${e.addresses[u]} - saved claim: ${t.addresses[u]}`);if(!n&&t.timestamp!==e.timestamp)throw new Error(`Invalid timestamp of Server: ${e.timestamp} - saved claim: ${t.timestamp}`);if(!n&&t.messageForAlice!==e.messageForAlice)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${t.messageForAlice}`);return!0},at=(e,t)=>{st(e,t);const n=b.getConfirmedClaim(e.addresses[o]);return n?P(e,n,!0):!0},st=(e,t)=>{const n=d.plus(t,d.minus(e.cumulativeDebits[u],e.cumulativeDebits[o])),a=`You are withdrawing: ${O(n)} DE.GA`;if(e.messageForAlice!==a)throw new Error(`Invalid message for Alice: ${e.messageForAlice} - expected: ${a}`)};var S={isValidNewClaim:pe,isValidClaimAlice:nt,areEqualClaims:P,isValidWithdraw:at},rt=[{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"}],name:"InitEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{components:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],indexed:!1,internalType:"struct VaultV1.EmergencyWithdrawRequest",name:"emergencyWithdrawRequest",type:"tuple"},{indexed:!1,internalType:"string",name:"cause",type:"string"}],name:"StopEmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],indexed:!1,internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"}],name:"WithdrawAlice",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawBob",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"clientAddress",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"balances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositFor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"emergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"emergencyWithdrawRequests",outputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"}],internalType:"struct VaultV1.ClaimTransaction",name:"claimTransaction",type:"tuple"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"address",name:"requester",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"initEmergencyWithdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initEmergencyWithdrawAliceWithoutClaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"alice",type:"address"}],name:"initEmergencyWithdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"address",name:"serverAddress",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"version",type:"string"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"stopEmergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"verify",outputs:[],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"address[]",name:"addresses",type:"address[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"string",name:"messageForAlice",type:"string"},{internalType:"uint256[]",name:"cumulativeDebits",type:"uint256[]"},{internalType:"bytes[]",name:"signatures",type:"bytes[]"},{internalType:"uint256",name:"closed",type:"uint256"}],internalType:"struct VaultV1.ClaimRequest",name:"req",type:"tuple"}],name:"withdrawAlice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"withdrawBob",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"withdrawTransactions",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"}],R=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];const K="0x9b9a5C1Af0A543d7dd243Bea6BDD53458dd0F067",H="0x16B052D944c1b7731d7C240b6072530929C93b40",it="0x6ce8dA28E2f864420840cF74474eFf5fD80E65B8",v=(e,t=K,n=rt)=>{const a=new E.default(e);return new a.eth.Contract(n,t)},N=async(e,t,n)=>await e.methods[t](...n).call(),me=async(e,t,n,a,r,l)=>{const C=new E.default(l),Y=await t.methods[n](...a).estimateGas({from:e}),Bt={gasPrice:await C.eth.getGasPrice(),from:e,gas:Y};await t.methods[n](...a).send(Bt).on("transactionHash",J=>{y(r,{txHash:J})}).on("receipt",J=>{y(r,{receipt:J})})};var h={getVaultBalance:async(e,t)=>{const n=v(t);return{balance:await N(n,"balanceOf",[e])}},withdrawConsensually:async(e,t)=>{const n=v(t),a=new E.default(t),r=e.addresses[0],l=await n.methods.withdrawAlice(e).estimateGas({from:r}),Y={gasPrice:await a.eth.getGasPrice(),from:r,gas:l};await n.methods.withdrawAlice(e).send(Y).on("transactionHash",B=>{console.log("txHash",B),y(s.withdrawHash,B)}).on("receipt",B=>{console.log("receipt",B),y(s.withdrawReceipt,B)})},getDegaBalance:async(e,t)=>{const n=v(t,H,R);return await N(n,"balanceOf",[e])},depositDega:async(e,t,n)=>{const a=v(n);await me(t,a,"deposit",[e],s.depositDega,n)},approveDega:async(e,t,n)=>{const a=v(n,H,R);await me(t,a,"approve",[K,e],s.approveDega,n)},getBtcbBalance:async(e,t)=>{const n=v(t,it,R);return await N(n,"balanceOf",[e])},getBnbBalance:async(e,t)=>await new E.default(t).eth.getBalance(e),getLastClosedChannel:async(e,t)=>{const n=v(t),a=await N(n,"emergencyWithdrawRequests",[e]);return a.claimTransaction.id.toString()!=="0"?a.claimTransaction.id.toString():(await N(n,"withdrawTransactions",[e])).id.toString()},getDegaAllowance:async(e,t)=>{const n=v(t,H,R);return await N(n,"allowance",[e,K])}};const ot=async(e,t)=>{S.isValidNewClaim(e);{if(!_(e))throw new Error("Server's signature is not verified");const n=await G(e,t);if(await he(e,t)===!0&&n)return await U(e),b.saveConfirmedClaim(e),e;throw new Error("Server's balance is not enough")}},we=e=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Claim:[{name:"id",type:"uint256"},{name:"alice",type:"address"},{name:"bob",type:"address"},{name:"nonce",type:"uint256"},{name:"timestamp",type:"uint256"},{name:"messageForAlice",type:"string"},{name:"cumulativeDebitAlice",type:"uint256"},{name:"cumulativeDebitBob",type:"uint256"},{name:"closed",type:"uint256"}]},domain:ae,primaryType:"Claim",message:{id:e.id,alice:e.addresses[o],bob:e.addresses[u],nonce:e.nonce,timestamp:e.timestamp,messageForAlice:e.messageForAlice,cumulativeDebitAlice:e.cumulativeDebits[o],cumulativeDebitBob:e.cumulativeDebits[u],closed:e.closed}}),_=(e,t=!1)=>{let n=1;t&&(n=0);const a=we(e),r=e.signatures[n];try{return p.recoverTypedSignature({data:a,signature:r,version:p.SignTypedDataVersion.V4}).toUpperCase()===e.addresses[n].toUpperCase()}catch{return!1}},ct=async(e,t)=>{const n=ge(e);S.isValidNewClaim(e);const a=await G(e,t);if(n&&a){if(await he(e,t)===!0)return await U(e),b.saveClaimAlice(e),e;throw new Error("Not enough balance")}},ge=e=>{const t=b.getClaimAlice(e.addresses[o]);if(t&&t.id===e.id&&t.nonce>=e.nonce)throw new Error(`Claim with nonce ${e.nonce} is already signed`);return!0},he=async(e,t)=>{const n=e.amount<0?0:1;return n===1?!0:lt(e,n,t)},lt=async(e,t,n)=>{try{const{balance:a}=await h.getVaultBalance(e.addresses[t],n);return!!d.gte(a,e.cumulativeDebits[t])}catch{throw new Error("Can't get balance from Vault")}},U=async e=>{const t=we(e),n=e.addresses[o];e.signatures[o]=await ne(t,n)},ut=async e=>{if(S.isValidClaimAlice(e))if(_(e))b.saveConfirmedClaim(e);else throw new Error("Server's signature is not verified")},dt=async(e,t)=>{const n=ge(e);let a;try{a=(await h.getVaultBalance(e.addresses[o],t)).balance}catch{throw new Error("Can't get balance from Vault")}const r=S.isValidWithdraw(e,a),l=await G(e,t);if(r&&n&&l)return await U(e),b.saveClaimAlice(e),e;throw new Error("Withdraw claim is not valid")},G=async(e,t)=>{const n=await h.getLastClosedChannel(e.addresses[o],t);if(d.eq(d.plus(n,"1"),e.id))return!0;throw new Error("Invalid channel id")};var D={cashin:ct,claimControfirmed:ut,cashout:ot,signWithdraw:dt,lastClaim:(e,t)=>{const n=b.getConfirmedClaim(t);if(!n&&e===null)return!0;if(!n&&e&&e.nonce)return b.saveConfirmedClaim(e),!0;if(n&&e===null)return n;if(e.id>=n.id&&e.nonce>n.nonce)return _(e,!0)&&_(e)?(b.saveConfirmedClaim(e),!0):n;try{return S.areEqualClaims(e,n)===!0&&e.signatures[o]===n.signatures[o]&&e.signatures[u]===n.signatures[u]?!0:n}catch{return n}},downloadLastClaim:b.downloadLastClaim,getConfirmedClaim:b.getConfirmedClaim};const pt=async e=>{try{await w()}catch(n){throw i(s.claimNotSigned,n),n}const t=g();try{const n=await D.cashin(e,t);return y(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},yt=async e=>{const t=g();try{return await h.getVaultBalance(e,t)}catch(n){console.error(n)}},mt=async e=>{try{await w()}catch(t){throw i(s.claimNotConfirmed,t),t}try{await D.claimControfirmed(e),y(s.claimConfirmed,{claim:e})}catch(t){throw i(s.claimNotConfirmed,{message:t,claim:e}),t}},wt=async e=>{try{await w()}catch(n){throw i(s.winNotConfirmed,n),n}const t=g();try{const n=await D.cashout(e,t);return y(s.winClaimSigned,{claim:n}),n}catch(n){throw i(s.winNotConfirmed,n),n}},gt=async e=>{if(e&&e.hasOwnProperty("error")){i(s.claimNotSynced,e.error);return}const{address:t}=await te();if(e&&e.addresses[o].toLowerCase()!==t.toLowerCase()){i(s.claimNotSynced,e.error);return}const n=D.lastClaim(e,t);if(n===!0)y(s.claimSynced,"Claims are synced");else return i(s.claimNotSynced,{message:"Claims are not synced",lastClaim:n}),n},ht=async e=>{try{await w()}catch(n){throw i(s.claimNotSigned,n),n}const t=g();try{const n=await D.signWithdraw(e,t);return y(s.claimSigned,{claim:n}),n}catch(n){throw i(s.claimNotSigned,n),n}},bt=async e=>{try{await w()}catch(n){throw i(s.withdraw,n),n}const t=g();try{await h.withdrawConsensually(e,t),y(s.withdraw,"Consensual withdraw is sent to blockchain")}catch(n){console.log("error",n),i(s.withdraw,n)}},ft=async e=>{try{await w()}catch(r){throw i(s.getBalance,r),r}let t="0";const n=g(),a=D.getConfirmedClaim(e);if(a&&a.closed===1&&await h.getLastClosedChannel(e,n)!==a.id.toString())return t;try{t=d.plus(t,(await h.getVaultBalance(e,n)).balance)}catch(r){i(s.getBalance,r)}return a&&a.closed!==1&&(t=d.plus(t,d.minus(a.cumulativeDebits[u],a.cumulativeDebits[o]))),t};var f={cashin:pt,claimControfirmed:mt,cashout:wt,lastClaim:gt,signWithdraw:ht,withdrawConsensually:bt,getVaultBalance:yt,downloadLastClaim:D.downloadLastClaim,getTotalBalance:ft};const Tt=async(e,t)=>{try{w()}catch(a){throw i(s.depositDega,a),a}const n=g();try{await Ct(e,t,n)}catch(a){throw i(s.depositDega,a),a}try{await h.depositDega(e,t,n)}catch(a){throw i(s.depositDega,a),a}},Ct=async(e,t,n)=>{let a;try{a=await h.getDegaBalance(t,n)}catch{throw new Error("Can't get balance of Dega")}if(d.lt(a,e))throw new Error("The balance of Dega is not enough")};var A={depositDega:Tt,approveDega:async(e,t)=>{try{w()}catch(a){throw i(s.approveDega,a),a}const n=g();try{await h.approveDega(e,t,n)}catch(a){throw i(s.approveDega,a),a}},getDegaBalance:async e=>{try{w()}catch(a){throw i(s.getBalance,a),a}const t=g();let n="0";try{n=await h.getDegaBalance(e,t)}catch{throw new Error("Can't get balance of Dega")}return n.toString()},getBtcbBalance:async e=>{try{w()}catch(a){throw i(s.getBalance,a),a}const t=g();let n="0";try{n=await h.getBtcbBalance(e,t)}catch{throw new Error("Can't get balance of BTCB")}return n.toString()},getBnbBalance:async e=>{try{w()}catch(a){throw i(s.getBalance,a),a}const t=g();let n="0";try{n=await h.getBnbBalance(e,t)}catch{throw new Error("Can't get balance of BNB")}return n.toString()},getDegaAllowance:async e=>{try{w()}catch(n){throw i(s.approveDega,n),n}const t=g();try{return await h.getDegaAllowance(e,t)}catch(n){throw i(s.approveDega,n),n}}};const vt="CASHIN",Dt="CASHOUT",Nt="WITHDRAW",At="HANDSHAKE";return{getAddress:te,isMetamaskInstalled:ee,isRightNet:Q,setRightNet:Ie,addEventListener:Ce,addEventListenerWS:ve,emitEventWS:De,receiveMsg:async e=>{if(e){const{action:t,claim:n,context:a,error:r}=JSON.parse(e);switch(r&&i(s.general,r),t){case At:{const l=await f.lastClaim(n);if(l)return{action:t,claim:l,context:a};break}case vt:{if(!n.signatures[o]&&!n.signatures[u]){const l=await f.cashin(n);return{action:t,claim:l,context:a}}else if(n.signatures[o]&&n.signatures[u])await f.claimControfirmed(n);else throw new Error("Invalid claim");break}case Dt:if(!n.signatures[o]&&n.signatures[u]){const l=await f.cashout(n);return{action:t,claim:l,context:a}}else throw new Error("Invalid claim");case Nt:{if(!n.signatures[o]&&!n.signatures[u]){const l=await f.signWithdraw(n);return{action:t,claim:l,context:a}}else if(n.signatures[o]&&n.signatures[u])await f.claimControfirmed(n),await f.withdrawConsensually(n);else throw new Error("Invalid claim");break}}}},signChallenge:k.signChallenge,setToken:k.setToken,getToken:k.getToken,isLogged:k.isLogged,getVaultBalance:f.getVaultBalance,getTotalBalance:f.getTotalBalance,downloadLastClaim:f.downloadLastClaim,formatNumber:O,pay:f.cashin,payReceived:f.claimControfirmed,win:f.cashout,depositDega:A.depositDega,approveDega:A.approveDega,getDegaAllowance:A.getDegaAllowance,getDegaBalance:A.getDegaBalance,getBtcbBalance:A.getBtcbBalance,getBnbBalance:A.getBnbBalance}});
